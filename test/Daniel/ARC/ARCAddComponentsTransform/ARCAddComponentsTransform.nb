(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     19574,        480]
NotebookOptionsPosition[     13262,        327]
NotebookOutlinePosition[     18871,        466]
CellTagsIndexPosition[     18828,        463]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["ARCAddComponentsTransform", "Title",ExpressionUUID->"47e9a897-2103-418b-aa42-b0145c7c154b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"RunUnitTests", "[", "ARCAddComponentsTransform", "]"}]}], "Code",
 InitializationCell->False,
 CellLabel->
  "In[1053]:=",ExpressionUUID->"203866d6-c667-4113-b7eb-dd5f72cc92fd"],

Cell[CellGroupData[{

Cell["Tests", "Section",ExpressionUUID->"edbf0c2c-827f-49aa-a1ea-cdc565fff37e"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicBox[ToBoxes[
   Column[{
     Framed[
      Grid[{{
         Button["Run", 
          
          With[{DevTools`TestingTools`Private`res = 
            DevTools`TestingTools`Private`runButtonClicked[
             "ARCAddComponentsTransform-20220807-6CUFJO", 
              Daniel`ARC`ARCAddComponentsTransform, 
              HoldComplete[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287142312821221], 93050366]}, 
           If[
            FailureQ[DevTools`TestingTools`Private`res], 
            Print[DevTools`TestingTools`Private`res]]], 
          ImageSize -> {57.5, 25}, Method -> "Queued"], 
         Button[
         "Update", {
           "TestUiMarker", "TestId" -> 
            "ARCAddComponentsTransform-20220807-6CUFJO"}; 
          DevTools`TestingTools`Private`updateTestClicked[
           "ARCAddComponentsTransform-20220807-6CUFJO", 
            Daniel`ARC`ARCAddComponentsTransform, 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287142312821221], "CellID" -> 93050366, 
            "SubTest" -> None], ImageSize -> {80., 25}, Method -> "Queued"], 
         Button["Open in Editor", 
          DevTools`TestingTools`Private`openInEditorClicked[
          "ARCAddComponentsTransform-20220807-6CUFJO", 
           Daniel`ARC`ARCAddComponentsTransform, 
           HoldComplete[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287142312821221], None], 
          ImageSize -> {140., 25}, Method -> "Queued"], 
         Row[{"ARCAddComponentsTransform-20220807-6CUFJO"}, 
          ImageSize -> {Full, Automatic}, Alignment -> {Right, Center}]}}], 
      ImageSize -> {Full, Automatic}, FrameStyle -> GrayLevel[0.8], 
      FrameMargins -> 10], 
     DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287142312821221; If[
       And[
        ValueQ[
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287142312821221], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287142312821221 =!= "", 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287142312821221 =!= Null], 
       (If[
        TrueQ[
         OptionValue[
         DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
        Framed[#, FrameStyle -> None, FrameMargins -> 2], 
        Framed[#, FrameStyle -> LightGray, Background -> White, FrameMargins -> 
         15]]& )[
        Grid[{{
           Pane[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287142312821221, "ImageSize" -> {Full, {0, 
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {}, 
                "MaxHeight"]}}, Scrollbars -> Automatic, FrameMargins -> 0]}, 
          If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
           Apply[Sequence, {}], {
            Button[
            "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287142312821221 = "", 
             ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
         Alignment -> {Left, Top}]], 
       Apply[Sequence, {}]]}], StandardForm],
  ImageSizeCache->{840., {21.8544921875, 27.1455078125}},
  TrackedSymbols:>{
   DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287142312821221}]], "TestUI",
 CellMargins->{{65, 0}, {0, 0}},
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 GeneratedCell->False,
 CellChangeTimes->{
  3.868885391590309*^9},ExpressionUUID->"c1a531d5-4ed7-4bc2-9b7d-\
55f109b92fad"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ARCAddComponentsTransform", "[", "\n", "\t", 
    RowBox[{
     RowBox[{"<|", "\n", "\t\t", 
      RowBox[{"\"\<Position\>\"", " ", "->", " ", 
       RowBox[{"{", 
        RowBox[{"2", ",", " ", "2"}], "}"}]}], "\n", "\t", "|>"}], ",", "\n", 
     "\t", 
     RowBox[{"<|", "\n", "\t\t", 
      RowBox[{
       RowBox[{"\"\<Image\>\"", " ", "->", " ", 
        RowBox[{"ARCScene", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"2", ",", " ", 
             RowBox[{"-", "1"}], ",", " ", 
             RowBox[{"-", "1"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"5", ",", " ", "5", ",", " ", "5"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"5", ",", " ", 
             RowBox[{"-", "1"}], ",", " ", "5"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"5", ",", " ", "5", ",", " ", "5"}], "}"}]}], "}"}], 
         "]"}]}], ",", "\n", "\t\t", 
       RowBox[{"\"\<Position\>\"", " ", "->", " ", 
        RowBox[{"{", 
         RowBox[{"1", ",", " ", "2"}], "}"}]}], ",", "\n", "\t\t", 
       RowBox[{"\"\<Components\>\"", " ", "->", " ", 
        RowBox[{"{", "\n", "\t\t\t", 
         RowBox[{
          RowBox[{"<|", "\n", "\t\t\t\t", 
           RowBox[{
            RowBox[{"\"\<Image\>\"", " ", "->", " ", 
             RowBox[{"ARCScene", "[", 
              RowBox[{"{", 
               RowBox[{"{", "2", "}"}], "}"}], "]"}]}], ",", "\n", "\t\t\t\t", 
            RowBox[{"\"\<Position\>\"", " ", "->", " ", 
             RowBox[{"{", 
              RowBox[{"1", ",", " ", "2"}], "}"}]}]}], "\n", "\t\t\t", "|>"}],
           ",", "\n", "\t\t\t", 
          RowBox[{"<|", "\n", "\t\t\t\t", 
           RowBox[{
            RowBox[{"\"\<Image\>\"", " ", "->", " ", 
             RowBox[{"ARCScene", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"5", ",", " ", "5", ",", " ", "5"}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"5", ",", " ", 
                  RowBox[{"-", "1"}], ",", " ", "5"}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"5", ",", " ", "5", ",", " ", "5"}], "}"}]}], "}"}], 
              "]"}]}], ",", "\n", "\t\t\t\t", 
            RowBox[{"\"\<Position\>\"", " ", "->", " ", 
             RowBox[{"{", 
              RowBox[{"2", ",", " ", "2"}], "}"}]}]}], "\n", "\t\t\t", 
           "|>"}]}], "\n", "\t\t", "}"}]}]}], "\n", "\t", "|>"}], ",", "\n", 
     "\t", 
     RowBox[{"<|", "\n", "\t\t", 
      RowBox[{
       RowBox[{"\"\<Image\>\"", " ", "->", " ", 
        RowBox[{"ARCScene", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"5", ",", " ", "5", ",", " ", "5"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"5", ",", " ", 
             RowBox[{"-", "1"}], ",", " ", "5"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"5", ",", " ", "5", ",", " ", "5"}], "}"}]}], "}"}], 
         "]"}]}], ",", "\n", "\t\t", 
       RowBox[{"\"\<Position\>\"", " ", "->", " ", 
        RowBox[{"{", 
         RowBox[{"2", ",", " ", "2"}], "}"}]}]}], "\n", "\t", "|>"}]}], "\n", 
    "]"}], " ", "//", " ", "SimplifyObjects"}], " ", "//", " ", 
  "ARCIndent"}]}], "Code",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellChangeTimes->{{3.86888526001414*^9, 3.868885391590309*^9}},
 CellLabel->"In[1051]:=",
 CellID->93050366,
 "TestId" -> 
 "ARCAddComponentsTransform-20220807-6CUFJO",ExpressionUUID->"1e32c90c-c9c5-\
40b2-898d-951b0b7a6765"]
}, Open  ]],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"<|\"\>"},
    {
     TemplateBox[{
       TemplateBox[{"\"    \"", 
         TemplateBox[{"\"\\\"Image\\\" -> \"", 
           TagBox[
            
            GridBox[{{"\"\"", "\"\"", "\"\""}, {"\"\"", "\"\"", "\"\""}, {
              "\"\"", "\"\"", "\"\""}, {"\"\"", "\"\"", "\"\""}}, AutoDelete -> 
             False, GridBoxBackground -> {
              "Columns" -> {{None}}, "Rows" -> {{None}}, 
               "ItemsIndexed" -> {{1, 1} -> RGBColor[1, 0, 0], {1, 2} -> 
                 GrayLevel[0.2], {1, 3} -> GrayLevel[0.2], {2, 1} -> 
                 GrayLevel[0.5], {2, 2} -> GrayLevel[0.5], {2, 3} -> 
                 GrayLevel[0.5], {3, 1} -> GrayLevel[0.5], {3, 2} -> 
                 GrayLevel[0.2], {3, 3} -> GrayLevel[0.5], {4, 1} -> 
                 GrayLevel[0.5], {4, 2} -> GrayLevel[0.5], {4, 3} -> 
                 GrayLevel[0.5]}}, 
             GridBoxDividers -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
             GridBoxFrame -> {
              "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
             GridBoxItemSize -> {"Columns" -> {{1.3}}, "Rows" -> {{1.5}}}, 
             FrameStyle -> {
               AbsoluteThickness[1], 
               GrayLevel[0.5]}], "Grid"]}, "RowDefault"]}, "RowDefault"], 
       "\",\""},
      "RowDefault"]},
    {"\<\"    \\\"Position\\\" -> {1, 2},\"\>"},
    {"\<\"    \\\"Components\\\" -> {\"\>"},
    {
     TemplateBox[{
       TemplateBox[{"\"        \"", 
         TemplateBox[{"\"<|\\\"Image\\\" -> \"", 
           TagBox[
            
            GridBox[{{"\"\""}}, AutoDelete -> False, 
             GridBoxBackground -> {
              "Columns" -> {{None}}, "Rows" -> {{None}}, 
               "ItemsIndexed" -> {{1, 1} -> RGBColor[1, 0, 0]}}, 
             GridBoxDividers -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
             GridBoxFrame -> {
              "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
             GridBoxItemSize -> {"Columns" -> {{1.3}}, "Rows" -> {{1.5}}}, 
             FrameStyle -> {
               AbsoluteThickness[1], 
               GrayLevel[0.5]}], "Grid"], 
           "\", \\\"Position\\\" -> {1, 2}|>\""}, "RowDefault"]}, 
        "RowDefault"], "\",\""},
      "RowDefault"]},
    {
     TemplateBox[{"\"        \"", 
       TemplateBox[{"\"<|\\\"Image\\\" -> \"", 
         TagBox[
          
          GridBox[{{"\"\"", "\"\"", "\"\""}, {"\"\"", "\"\"", "\"\""}, {
            "\"\"", "\"\"", "\"\""}}, AutoDelete -> False, 
           GridBoxBackground -> {
            "Columns" -> {{None}}, "Rows" -> {{None}}, 
             "ItemsIndexed" -> {{1, 1} -> GrayLevel[0.5], {1, 2} -> 
               GrayLevel[0.5], {1, 3} -> GrayLevel[0.5], {2, 1} -> 
               GrayLevel[0.5], {2, 2} -> GrayLevel[0.2], {2, 3} -> 
               GrayLevel[0.5], {3, 1} -> GrayLevel[0.5], {3, 2} -> 
               GrayLevel[0.5], {3, 3} -> GrayLevel[0.5]}}, 
           GridBoxDividers -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
           GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}},
            GridBoxItemSize -> {"Columns" -> {{1.3}}, "Rows" -> {{1.5}}}, 
           FrameStyle -> {
             AbsoluteThickness[1], 
             GrayLevel[0.5]}], "Grid"], "\", \\\"Position\\\" -> {2, 2}|>\""},
         "RowDefault"]},
      "RowDefault"]},
    {"\<\"    },\"\>"},
    {"\<\"    \\\"Transform\\\" -> <|\"\>"},
    {"\<\"        \\\"Type\\\" -> \\\"AddComponents\\\",\"\>"},
    {
     TemplateBox[{"\"        \"", 
       TemplateBox[{"\"\\\"Components\\\" -> {\"", "\"<|\\\"Image\\\" -> \"", 
         TagBox[
          
          GridBox[{{"\"\""}}, AutoDelete -> False, 
           GridBoxBackground -> {
            "Columns" -> {{None}}, "Rows" -> {{None}}, 
             "ItemsIndexed" -> {{1, 1} -> RGBColor[1, 0, 0]}}, 
           GridBoxDividers -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
           GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}},
            GridBoxItemSize -> {"Columns" -> {{1.3}}, "Rows" -> {{1.5}}}, 
           FrameStyle -> {
             AbsoluteThickness[1], 
             GrayLevel[0.5]}], "Grid"], "\", \\\"Position\\\" -> \"", 
         "\"<|\\\"RelativePosition\\\" -> {-1, 0}|>\"", "\"|>\"", "\"}\""}, 
        "RowDefault"]},
      "RowDefault"]},
    {"\<\"    |>\"\>"},
    {"\<\"|>\"\>"}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{{3.8688852577666063`*^9, 3.8688852702613907`*^9}, 
   3.8688853408258624`*^9, 3.868885384905675*^9},
 CellLabel->
  "Out[1052]=",ExpressionUUID->"b8c55688-b58a-4c2f-acea-50dbad94af26"]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{958, 980},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   BoxData[
    DynamicBox[
     ToBoxes[
      Column[{
        Row[{
          Button["New Test", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`NewFunctionCell[
            Daniel`ARC`ARCAddComponentsTransform], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20228714145819004]], ImageSize -> {95., 40}, 
           Method -> "Queued"], " ", 
          Button["Add Tests to File", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`CreateUnitTests[
            Daniel`ARC`ARCAddComponentsTransform, "SubTest" -> None], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20228714145819004]], ImageSize -> {162.5, 40}, 
           Method -> "Queued"], " ", 
          Button[
          "Run Tests", 
           DevTools`TestingTools`RunUnitTestsInNotebook[
            Daniel`ARC`ARCAddComponentsTransform]; Null, 
           ImageSize -> {102.5, 40}, Method -> "Queued"], " ", 
          Button["Edit Tests", 
           DevTools`TestingTools`EditUnitTests[
           Daniel`ARC`ARCAddComponentsTransform], ImageSize -> {110., 40}, 
           Method -> "Queued"], " ", 
          Button["Edit Function", 
           DevTools`SourceTools`EditFunction[
           Daniel`ARC`ARCAddComponentsTransform], ImageSize -> {132.5, 40}, 
           Method -> "Queued"], " ", 
          Row[{
            
            DynamicModule[{
             DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
              "Capture"}, 
             Button[
              Dynamic[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel], 
              If[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel === 
               "Capture", 
               DevTools`TestingTools`FunctionCapture`EnableFunctionCapture[
                Daniel`ARC`ARCAddComponentsTransform]; 
               
               DevTools`TestingTools`FunctionCapture`\
RegisterFunctionCaptureNotebook[Daniel`ARC`ARCAddComponentsTransform, 
                 InputNotebook[]]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Release"; Null, 
               DevTools`TestingTools`FunctionCapture`DisableFunctionCapture[
                Daniel`ARC`ARCAddComponentsTransform]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Capture"; Null], ImageSize -> {100, 40}, Method -> "Queued"],
              DynamicModuleValues :> {}], 
            Button["?", 
             DevTools`TestingTools`FunctionCapture`CaptureFunctionHelp[], 
             ImageSize -> {30, 40}, Method -> "Queued"]}], " ", 
          Row[{
            Button["<", 
             DevTools`NotebookTools`MoveNotebook["Left"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"], 
            Button[">", 
             DevTools`NotebookTools`MoveNotebook["Right"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"]}]}], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20228714145819004; If[
          And[
           ValueQ[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20228714145819004], 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20228714145819004 =!= "", 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20228714145819004 =!= Null], 
          (If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {"MaxHeight" -> 300},
              "NakedSection"]], 
           Framed[#, FrameStyle -> None, FrameMargins -> 2], 
           
           Framed[#, FrameStyle -> LightGray, Background -> White, 
            FrameMargins -> 15]]& )[
           Grid[{{
              Pane[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20228714145819004, "ImageSize" -> {Full, {0, 
                  OptionValue[
                  DevTools`NotebookTools`DynamicOutputSection, {
                   "MaxHeight" -> 300}, "MaxHeight"]}}, Scrollbars -> 
               Automatic, FrameMargins -> 0]}, 
             If[
              TrueQ[
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {
                "MaxHeight" -> 300}, "NakedSection"]], 
              Apply[Sequence, {}], {
               Button[
               "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20228714145819004 = "", 
                ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
            Alignment -> {Left, Top}]], 
          Apply[Sequence, {}]]}], StandardForm], 
     TrackedSymbols :> {
      DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20228714145819004}]], "DockedCell"]},
TaggingRules->{
 "CreateNamedNotebook2Args" -> {
   "ARCAddComponentsTransform", "Type" -> "Function", 
    "GenerateNotebookArgs" -> {
     "Function" -> Daniel`ARC`ARCAddComponentsTransform}, "ReturnNotebook" -> 
    True}},
FrontEndVersion->"12.3 for Microsoft Windows (64-bit) (July 9, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"1f474307-d18c-4042-bbe8-a3a711919afe"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 97, 0, 98, "Title",ExpressionUUID->"47e9a897-2103-418b-aa42-b0145c7c154b"],
Cell[680, 24, 261, 6, 54, "Code",ExpressionUUID->"203866d6-c667-4113-b7eb-dd5f72cc92fd",
 InitializationCell->False],
Cell[CellGroupData[{
Cell[966, 34, 79, 0, 67, "Section",ExpressionUUID->"edbf0c2c-827f-49aa-a1ea-cdc565fff37e"],
Cell[CellGroupData[{
Cell[1070, 38, 3646, 85, 52, "TestUI",ExpressionUUID->"c1a531d5-4ed7-4bc2-9b7d-55f109b92fad",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[4719, 125, 3731, 91, 450, "Code",ExpressionUUID->"1e32c90c-c9c5-40b2-898d-951b0b7a6765",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellID->93050366]
}, Open  ]],
Cell[8465, 219, 4769, 104, 403, "Output",ExpressionUUID->"b8c55688-b58a-4c2f-acea-50dbad94af26"]
}, Open  ]]
}, Open  ]]
}
]
*)

