(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     14460,        330]
NotebookOptionsPosition[      7765,        173]
NotebookOutlinePosition[     13273,        309]
CellTagsIndexPosition[     13230,        306]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["ARCTaskMarkdown", "Title",ExpressionUUID->"97ccada2-3a43-4e8a-a228-426aa37480ee"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"RunUnitTests", "[", "ARCTaskMarkdown", "]"}]}], "Code",
 InitializationCell->
  False,ExpressionUUID->"1dabb0f9-608c-4b55-b80d-7dbdedf317b7"],

Cell[CellGroupData[{

Cell["Links", "Section",
 CellChangeTimes->{{3.868965771670374*^9, 
  3.8689657721509185`*^9}},ExpressionUUID->"2ca3cfd3-74c7-47aa-993a-\
09c545fdb199"],

Cell[BoxData[
 RowBox[{"FunctionNotebook", "[", "ARCImplementedTasksMarkdown", 
  "]"}]], "Input",
 CellChangeTimes->{3.86896580874201*^9},
 CellLabel->
  "In[275]:=",ExpressionUUID->"639ffec2-3012-479f-be76-6fd94a7ec33a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tests", "Section",ExpressionUUID->"69ba7aca-a4ce-40bf-8c3f-485e1726500d"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["NOTE",
  FontWeight->"Bold"],
 ": I\[CloseCurlyQuote]ve been struggling with Mathematica freezing."
}], "Item",
 CellChangeTimes->{{3.8689650148319726`*^9, 
  3.868965023091016*^9}},ExpressionUUID->"ee490cc3-75ae-4390-9f99-\
ce31f74261ba"],

Cell[BoxData[
 RowBox[{"<<", " ", "Daniel`ARC`"}]], "Input",
 CellChangeTimes->{{3.8689611597062044`*^9, 3.8689611619622364`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"65babb58-5c29-41fb-b4d1-1d5ecdbbd64f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"example", " ", "=", " ", "\"\<0ca9ddb6\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Lui", "[", "example", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8689649380423017`*^9, 3.8689649396500463`*^9}, 
   3.868965012385483*^9, 3.8689652453048477`*^9, 3.8689656304820895`*^9},
 CellLabel->
  "In[316]:=",ExpressionUUID->"5fbb334c-6648-447d-98b7-95603981f576"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"example", " ", "=", " ", "\"\<3c9b0459\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Lui", "[", "example", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8689649380423017`*^9, 3.8689649396500463`*^9}, 
   3.868965012385483*^9, 3.8689652453048477`*^9},
 CellLabel->"In[36]:=",ExpressionUUID->"410bda6c-a947-4150-afeb-44e44ea8a62b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"example", " ", "=", " ", "\"\<2wfys5w64-relative-right-side\>\""}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{"Lui", "[", "example", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8689649380423017`*^9, 3.8689649396500463`*^9}, 
   3.868965012385483*^9, 3.8689652453048477`*^9, 3.868967307532199*^9, {
   3.868967344660019*^9, 3.868967511631118*^9}, 3.8689765094326515`*^9, 
   3.868977099262747*^9, 3.868977891746933*^9, {3.8689789436069107`*^9, 
   3.868978943919848*^9}, 3.868979118437803*^9, 3.868979236910008*^9, 
   3.868979644227228*^9, 3.868980051438182*^9, 3.86898084626181*^9, 
   3.8689817710006275`*^9, 3.8689826203856926`*^9, 3.8689841961282263`*^9, {
   3.868984620002985*^9, 3.8689846202679787`*^9}, 3.868985023017642*^9},
 CellLabel->
  "In[320]:=",ExpressionUUID->"9b31e9ce-d018-4980-8db5-5d687f883b46"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"ARCTaskMarkdown", "[", "example", "]"}]}], "Code",
 InitializationCell->False,
 CellChangeTimes->{
  3.8689542974348593`*^9, {3.8689649487869816`*^9, 3.8689649634900265`*^9}, {
   3.8689650111231766`*^9, 3.8689650115775943`*^9}},
 CellLabel->
  "In[322]:=",ExpressionUUID->"8e7f1e69-6c8d-4a11-9221-ff4b107368b1"],

Cell[BoxData["\<\"# 2wfys5w64-relative-right-side\\n\\n## Examples\\n\\n![ARC \
examples for 2wfys5w64-relative-right-side](examples.png?raw=true)\\n\\n## \
Rules (DSL)\\n\\n![DSL rules for \
2wfys5w64-relative-right-side](rules.png?raw=true)\\n\\n## Notes\\n\\n### \
Finding Rules\\n\\n\\n#### Finding Rules from Object Mappings\\n\\n* As noted \
elsewhere, we make use of metadata in $transformTypes to specify, for a given \
transform type, what the minimum property sets are. i.e. What parameters of a \
transform do we need to be able to dependably infer in order to be able to \
apply a rule to all instances that match its pattern?\\n* The AddComponents \
$transformType metadata looks like this:\\n![image 1](image1.png?raw=true)\\n\
\\n* Things to notice:\\n   * We need both the Image and Position of a \
component to know where to add it to the output scene.\\n   * If the position \
is relative (\[CloseCurlyDoubleQuote]Position\[CloseCurlyDoubleQuote] -> <|\
\[CloseCurlyDoubleQuote]RelativePosition\[CloseCurlyDoubleQuote] -> ...|>), \
as would typically be the case with an AddComponents transform, then we need \
to be able to specify the parameters of the RelativePosition.\\n   * When we \
say \[OpenCurlyDoubleQuote]Y\[CloseCurlyDoubleQuote] | \
\[OpenCurlyDoubleQuote]YInverse\[CloseCurlyDoubleQuote], we mean that we need \
to specify either \[OpenCurlyDoubleQuote]Y\[CloseCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]YInverse\[CloseCurlyDoubleQuote]. (and likewise for \
\[OpenCurlyDoubleQuote]X\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]XInverse\[CloseCurlyDoubleQuote])\\n       * \
\[OpenCurlyDoubleQuote]Y\[CloseCurlyDoubleQuote] is the Y component of the \
top of the object, typically relative to the top of the scene (or in this \
case, relative to the top of the image we\[CloseCurlyQuote]re adding \
components to).\\n       * \[OpenCurlyDoubleQuote]YInverse\
\[CloseCurlyDoubleQuote] is the Y component of the top of the object, \
typically relative to the top of the scene (or in this case, relative to the \
top of the image we\[CloseCurlyQuote]re adding components to).\\n   * Given a \
set of output objects that we\[CloseCurlyQuote]d like to cover with a rule, \
our implementation tries to find a minimum property set. It works its way \
down through the nested sub-properties of the transform, trying to determine \
how they can be inferred. Each time it gets to an Alternatives, it will \
consider whether one of the alternatives can be inferred, and if so, it will \
specify the inferrable sub-property.\"\>"], "Output",
 CellChangeTimes->{
  3.8689649449325647`*^9, 3.8689651032264614`*^9, 3.868965255880374*^9, {
   3.8689656346787014`*^9, 3.8689656388795834`*^9}, 3.8689659650549088`*^9, 
   3.868966853023559*^9, 3.86896689213899*^9, {3.868966953221799*^9, 
   3.8689670088189487`*^9}, 3.86896706914168*^9, {3.8689671609215584`*^9, 
   3.8689672071654654`*^9}, 3.868967311405991*^9, {3.8689673495128994`*^9, 
   3.8689675138842382`*^9}, 3.8689765126673613`*^9, 3.868977031270672*^9, 
   3.868977780794986*^9, 3.8689784619276056`*^9, {3.8689785035682154`*^9, 
   3.8689785306254764`*^9}, 3.868978675981266*^9, {3.8689788078449306`*^9, 
   3.868978837780882*^9}, 3.8689791206022277`*^9, 3.868979551490037*^9, 
   3.8689799044929323`*^9, 3.8689799416723495`*^9, 3.868980053996606*^9, 
   3.8689802964063625`*^9, 3.868980387084422*^9, 3.8689815327577944`*^9, 
   3.8689817425868883`*^9, 3.868982223234877*^9, 3.868982479082567*^9, 
   3.86898324877942*^9, 3.8689837610104523`*^9, 3.868984201215054*^9, 
   3.868984549238701*^9, 3.868984622898755*^9, 3.868984741770414*^9, {
   3.8689859334555855`*^9, 3.868985958101139*^9}},
 CellLabel->
  "Out[323]=",ExpressionUUID->"50c3b7c0-6fa0-4f51-b409-e4816b0e9e62"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{718.5, 735.},
WindowMargins->{{-5.25, Automatic}, {Automatic, 0}},
Visible->True,
DockedCells->{
  Cell[
   BoxData[
    DynamicBox[
     ToBoxes[
      Column[{
        Row[{
          Button["New Test", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`NewFunctionCell[Daniel`ARC`ARCTaskMarkdown], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687]], ImageSize -> {95., 40}, 
           Method -> "Queued"], " ", 
          Button["Add Tests to File", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`CreateUnitTests[
            Daniel`ARC`ARCTaskMarkdown, "SubTest" -> None], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687]], ImageSize -> {162.5, 40}, 
           Method -> "Queued"], " ", 
          Button[
          "Run Tests", 
           DevTools`TestingTools`RunUnitTestsInNotebook[
            Daniel`ARC`ARCTaskMarkdown]; Null, ImageSize -> {102.5, 40}, 
           Method -> "Queued"], " ", 
          Button["Edit Tests", 
           DevTools`TestingTools`EditUnitTests[Daniel`ARC`ARCTaskMarkdown], 
           ImageSize -> {110., 40}, Method -> "Queued"], " ", 
          Button["Edit Function", 
           DevTools`SourceTools`EditFunction[Daniel`ARC`ARCTaskMarkdown], 
           ImageSize -> {132.5, 40}, Method -> "Queued"], " ", 
          Row[{
            
            DynamicModule[{
             DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
              "Capture"}, 
             Button[
              Dynamic[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel], 
              If[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel === 
               "Capture", 
               DevTools`TestingTools`FunctionCapture`EnableFunctionCapture[
                Daniel`ARC`ARCTaskMarkdown]; 
               DevTools`TestingTools`FunctionCapture`\
RegisterFunctionCaptureNotebook[Daniel`ARC`ARCTaskMarkdown, 
                 InputNotebook[]]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Release"; Null, 
               DevTools`TestingTools`FunctionCapture`DisableFunctionCapture[
                Daniel`ARC`ARCTaskMarkdown]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Capture"; Null], ImageSize -> {100, 40}, Method -> "Queued"],
              DynamicModuleValues :> {}], 
            Button["?", 
             DevTools`TestingTools`FunctionCapture`CaptureFunctionHelp[], 
             ImageSize -> {30, 40}, Method -> "Queued"]}], " ", 
          Row[{
            Button["<", 
             DevTools`NotebookTools`MoveNotebook["Left"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"], 
            Button[">", 
             DevTools`NotebookTools`MoveNotebook["Right"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"]}]}], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687; If[
          And[
           ValueQ[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687], 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687 =!= "", 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687 =!= Null], 
          (If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {"MaxHeight" -> 300},
              "NakedSection"]], 
           Framed[#, FrameStyle -> None, FrameMargins -> 2], 
           
           Framed[#, FrameStyle -> LightGray, Background -> White, 
            FrameMargins -> 15]]& )[
           Grid[{{
              Pane[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687, "ImageSize" -> {Full, {0, 
                  OptionValue[
                  DevTools`NotebookTools`DynamicOutputSection, {
                   "MaxHeight" -> 300}, "MaxHeight"]}}, Scrollbars -> 
               Automatic, FrameMargins -> 0]}, 
             If[
              TrueQ[
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {
                "MaxHeight" -> 300}, "NakedSection"]], 
              Apply[Sequence, {}], {
               Button[
               "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687 = "", 
                ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
            Alignment -> {Left, Top}]], 
          Apply[Sequence, {}]]}], StandardForm], 
     TrackedSymbols :> {
      DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687}]], "DockedCell"]},
TaggingRules->{
 "CreateNamedNotebook2Args" -> {
   "ARCTaskMarkdown", "Type" -> "Function", 
    "GenerateNotebookArgs" -> {"Function" -> Daniel`ARC`ARCTaskMarkdown}, 
    "ReturnNotebook" -> True}},
InputAutoReplacements->{},
FrontEndVersion->"13.1 for Microsoft Windows (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"09946e10-fd80-464b-ae3e-deb44a6ed03e"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 87, 0, 98, "Title",ExpressionUUID->"97ccada2-3a43-4e8a-a228-426aa37480ee"],
Cell[670, 24, 225, 5, 52, "Code",ExpressionUUID->"1dabb0f9-608c-4b55-b80d-7dbdedf317b7",
 InitializationCell->False],
Cell[CellGroupData[{
Cell[920, 33, 152, 3, 67, "Section",ExpressionUUID->"2ca3cfd3-74c7-47aa-993a-09c545fdb199"],
Cell[1075, 38, 222, 5, 28, "Input",ExpressionUUID->"639ffec2-3012-479f-be76-6fd94a7ec33a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1334, 48, 79, 0, 67, "Section",ExpressionUUID->"69ba7aca-a4ce-40bf-8c3f-485e1726500d"],
Cell[CellGroupData[{
Cell[1438, 52, 266, 7, 32, "Item",ExpressionUUID->"ee490cc3-75ae-4390-9f99-ce31f74261ba"],
Cell[1707, 61, 209, 3, 28, "Input",ExpressionUUID->"65babb58-5c29-41fb-b4d1-1d5ecdbbd64f"],
Cell[1919, 66, 391, 8, 48, "Input",ExpressionUUID->"5fbb334c-6648-447d-98b7-95603981f576"],
Cell[2313, 76, 363, 7, 48, "Input",ExpressionUUID->"410bda6c-a947-4150-afeb-44e44ea8a62b"],
Cell[2679, 85, 850, 15, 48, "Input",ExpressionUUID->"9b31e9ce-d018-4980-8db5-5d687f883b46"],
Cell[CellGroupData[{
Cell[3554, 104, 396, 9, 52, "Code",ExpressionUUID->"8e7f1e69-6c8d-4a11-9221-ff4b107368b1",
 InitializationCell->False],
Cell[3953, 115, 3760, 52, 851, "Output",ExpressionUUID->"50c3b7c0-6fa0-4f51-b409-e4816b0e9e62"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

