(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     14016,        328]
NotebookOptionsPosition[      7234,        170]
NotebookOutlinePosition[     12735,        306]
CellTagsIndexPosition[     12692,        303]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["ARCTaskMarkdown", "Title",ExpressionUUID->"97ccada2-3a43-4e8a-a228-426aa37480ee"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"RunUnitTests", "[", "ARCTaskMarkdown", "]"}]}], "Code",
 InitializationCell->
  False,ExpressionUUID->"1dabb0f9-608c-4b55-b80d-7dbdedf317b7"],

Cell[CellGroupData[{

Cell["Links", "Section",
 CellChangeTimes->{{3.868965771670374*^9, 
  3.8689657721509185`*^9}},ExpressionUUID->"2ca3cfd3-74c7-47aa-993a-\
09c545fdb199"],

Cell[BoxData[
 RowBox[{"FunctionNotebook", "[", "ARCImplementedTasksMarkdown", 
  "]"}]], "Input",
 CellChangeTimes->{3.86896580874201*^9},
 CellLabel->
  "In[275]:=",ExpressionUUID->"639ffec2-3012-479f-be76-6fd94a7ec33a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tests", "Section",ExpressionUUID->"69ba7aca-a4ce-40bf-8c3f-485e1726500d"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["NOTE",
  FontWeight->"Bold"],
 ": I\[CloseCurlyQuote]ve been struggling with Mathematica freezing."
}], "Item",
 CellChangeTimes->{{3.8689650148319726`*^9, 
  3.868965023091016*^9}},ExpressionUUID->"ee490cc3-75ae-4390-9f99-\
ce31f74261ba"],

Cell[BoxData[
 RowBox[{"<<", " ", "Daniel`ARC`"}]], "Input",
 CellChangeTimes->{{3.8689611597062044`*^9, 3.8689611619622364`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"65babb58-5c29-41fb-b4d1-1d5ecdbbd64f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"example", " ", "=", " ", "\"\<0ca9ddb6\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Lui", "[", "example", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8689649380423017`*^9, 3.8689649396500463`*^9}, 
   3.868965012385483*^9, 3.8689652453048477`*^9, 3.8689656304820895`*^9},
 CellLabel->
  "In[316]:=",ExpressionUUID->"5fbb334c-6648-447d-98b7-95603981f576"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"example", " ", "=", " ", "\"\<n1hczotml\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Lui", "[", "example", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8689649380423017`*^9, 3.8689649396500463`*^9}, 
   3.868965012385483*^9, 3.8689652453048477`*^9, 3.86917497488395*^9},
 CellLabel->
  "In[671]:=",ExpressionUUID->"410bda6c-a947-4150-afeb-44e44ea8a62b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"example", " ", "=", " ", "\"\<ifmyulnv8-shape\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Lui", "[", "example", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8689649380423017`*^9, 3.8689649396500463`*^9}, 
   3.868965012385483*^9, 3.8689652453048477`*^9, 3.868967307532199*^9, {
   3.868967344660019*^9, 3.868967511631118*^9}, 3.8689765094326515`*^9, 
   3.868977099262747*^9, 3.868977891746933*^9, {3.8689789436069107`*^9, 
   3.868978943919848*^9}, 3.868979118437803*^9, 3.868979236910008*^9, 
   3.868979644227228*^9, 3.868980051438182*^9, 3.86898084626181*^9, 
   3.8689817710006275`*^9, 3.8689826203856926`*^9, 3.8689841961282263`*^9, {
   3.868984620002985*^9, 3.8689846202679787`*^9}, 3.868985023017642*^9, 
   3.868986238763791*^9, 3.8689970129419875`*^9, 3.869174851022614*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"9b31e9ce-d018-4980-8db5-5d687f883b46"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"example", " ", "=", " ", "\"\<ifmyulnv8-dynamic-shape\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"Lui", "[", "example", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8689649380423017`*^9, 3.8689649396500463`*^9}, 
   3.868965012385483*^9, 3.8689652453048477`*^9, 3.868967307532199*^9, {
   3.868967344660019*^9, 3.868967511631118*^9}, 3.8689765094326515`*^9, 
   3.868977099262747*^9, 3.868977891746933*^9, {3.8689789436069107`*^9, 
   3.868978943919848*^9}, 3.868979118437803*^9, 3.868979236910008*^9, 
   3.868979644227228*^9, 3.868980051438182*^9, 3.86898084626181*^9, 
   3.8689817710006275`*^9, 3.8689826203856926`*^9, 3.8689841961282263`*^9, {
   3.868984620002985*^9, 3.8689846202679787`*^9}, 3.868985023017642*^9, 
   3.868986238763791*^9, 3.8689970129419875`*^9, 3.869174851022614*^9, {
   3.8693294417475023`*^9, 3.869329442609144*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"447c1e8d-e39b-462e-a9c6-5fc02f8816c4"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"ARCTaskMarkdown", "[", "example", "]"}]}], "Code",
 InitializationCell->False,
 CellChangeTimes->{
  3.8689542974348593`*^9, {3.8689649487869816`*^9, 3.8689649634900265`*^9}, {
   3.8689650111231766`*^9, 3.8689650115775943`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"8e7f1e69-6c8d-4a11-9221-ff4b107368b1"],

Cell[BoxData["\<\"# ifmyulnv8-dynamic-shape\\n\\n## Examples\\n\\n![ARC \
examples for ifmyulnv8-dynamic-shape](examples.png?raw=true)\\n\\n## Rules \
(DSL)\\n\\n![DSL rules for \
ifmyulnv8-dynamic-shape](rules.png?raw=true)\\n\\n## Notes\\n\\n### Finding \
Rules\\n\\n\\n#### Scene Parsing\\n\\nWe parse the input and output scenes \
into objects.\\n\\n\\n#### Mapping Input Objects to Output Objects\\n\\nSee \
the [ifmyulnv8-shape](https://github.com/dbigham/ARC/blob/main/TaskNotes/\
ifmyulnv8-shape/notes.md) example for details.\\n\\n\\n#### Finding Rules \
from Object Mappings\\n\\n* See the \
[ifmyulnv8-shape](https://github.com/dbigham/ARC/blob/main/TaskNotes/\
ifmyulnv8-shape/notes.md) example for details.\\n* Building on \
ifmyulnv8-shape, what is needed here is a new property called \
\[OpenCurlyDoubleQuote]Shape\[CloseCurlyDoubleQuote], in addition to the \
existing property \[OpenCurlyDoubleQuote]Shapes\[CloseCurlyDoubleQuote].\\n* \
The new \[OpenCurlyDoubleQuote]Shape\[CloseCurlyDoubleQuote] property is the \
most specific shape from the \[OpenCurlyDoubleQuote]Shapes\
\[CloseCurlyDoubleQuote] list.\\n* This allows us to use the shape of the \
referenceable non-gray object as the shape for the component we add inside of \
the gray square.\\n\\n\\n![image 1](image1.png?raw=true)\\n\\n* We also add a \
new minimum property set \
{\[OpenCurlyDoubleQuote]Shape\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Width\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Height\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Color\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Position\[CloseCurlyDoubleQuote]} in \
AddComponents.Components:\\n\\n![image 2](image2.png?raw=true)\\n\\n* A good \
enhancement would be to allow Alternatives in the MinimalPropertySets \
structure, which would allow avoiding adding the third row in the above list, \
instead using \[OpenCurlyDoubleQuote]Shapes\[CloseCurlyDoubleQuote] | \
\[OpenCurlyDoubleQuote]Shape\[CloseCurlyDoubleQuote] within:\\n\\n![image \
3](image3.png?raw=true)\\n\"\>"], "Output",
 CellChangeTimes->{3.8693311490773544`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"1002e8e7-bb18-4d64-8f7f-cf54308d1300"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{958, 980},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
Visible->True,
DockedCells->{
  Cell[
   BoxData[
    DynamicBox[
     ToBoxes[
      Column[{
        Row[{
          Button["New Test", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`NewFunctionCell[Daniel`ARC`ARCTaskMarkdown], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687]], ImageSize -> {95., 40}, 
           Method -> "Queued"], " ", 
          Button["Add Tests to File", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`CreateUnitTests[
            Daniel`ARC`ARCTaskMarkdown, "SubTest" -> None], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687]], ImageSize -> {162.5, 40}, 
           Method -> "Queued"], " ", 
          Button[
          "Run Tests", 
           DevTools`TestingTools`RunUnitTestsInNotebook[
            Daniel`ARC`ARCTaskMarkdown]; Null, ImageSize -> {102.5, 40}, 
           Method -> "Queued"], " ", 
          Button["Edit Tests", 
           DevTools`TestingTools`EditUnitTests[Daniel`ARC`ARCTaskMarkdown], 
           ImageSize -> {110., 40}, Method -> "Queued"], " ", 
          Button["Edit Function", 
           DevTools`SourceTools`EditFunction[Daniel`ARC`ARCTaskMarkdown], 
           ImageSize -> {132.5, 40}, Method -> "Queued"], " ", 
          Row[{
            
            DynamicModule[{
             DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
              "Capture"}, 
             Button[
              Dynamic[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel], 
              If[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel === 
               "Capture", 
               DevTools`TestingTools`FunctionCapture`EnableFunctionCapture[
                Daniel`ARC`ARCTaskMarkdown]; 
               DevTools`TestingTools`FunctionCapture`\
RegisterFunctionCaptureNotebook[Daniel`ARC`ARCTaskMarkdown, 
                 InputNotebook[]]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Release"; Null, 
               DevTools`TestingTools`FunctionCapture`DisableFunctionCapture[
                Daniel`ARC`ARCTaskMarkdown]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Capture"; Null], ImageSize -> {100, 40}, Method -> "Queued"],
              DynamicModuleValues :> {}], 
            Button["?", 
             DevTools`TestingTools`FunctionCapture`CaptureFunctionHelp[], 
             ImageSize -> {30, 40}, Method -> "Queued"]}], " ", 
          Row[{
            Button["<", 
             DevTools`NotebookTools`MoveNotebook["Left"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"], 
            Button[">", 
             DevTools`NotebookTools`MoveNotebook["Right"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"]}]}], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687; If[
          And[
           ValueQ[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687], 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687 =!= "", 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687 =!= Null], 
          (If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {"MaxHeight" -> 300},
              "NakedSection"]], 
           Framed[#, FrameStyle -> None, FrameMargins -> 2], 
           
           Framed[#, FrameStyle -> LightGray, Background -> White, 
            FrameMargins -> 15]]& )[
           Grid[{{
              Pane[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687, "ImageSize" -> {Full, {0, 
                  OptionValue[
                  DevTools`NotebookTools`DynamicOutputSection, {
                   "MaxHeight" -> 300}, "MaxHeight"]}}, Scrollbars -> 
               Automatic, FrameMargins -> 0]}, 
             If[
              TrueQ[
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {
                "MaxHeight" -> 300}, "NakedSection"]], 
              Apply[Sequence, {}], {
               Button[
               "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687 = "", 
                ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
            Alignment -> {Left, Top}]], 
          Apply[Sequence, {}]]}], StandardForm], 
     TrackedSymbols :> {
      DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687}]], "DockedCell"]},
TaggingRules->{
 "CreateNamedNotebook2Args" -> {
   "ARCTaskMarkdown", "Type" -> "Function", 
    "GenerateNotebookArgs" -> {"Function" -> Daniel`ARC`ARCTaskMarkdown}, 
    "ReturnNotebook" -> True}},
InputAutoReplacements->{},
FrontEndVersion->"12.3 for Microsoft Windows (64-bit) (July 9, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"09946e10-fd80-464b-ae3e-deb44a6ed03e"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 87, 0, 98, "Title",ExpressionUUID->"97ccada2-3a43-4e8a-a228-426aa37480ee"],
Cell[670, 24, 225, 5, 54, "Code",ExpressionUUID->"1dabb0f9-608c-4b55-b80d-7dbdedf317b7",
 InitializationCell->False],
Cell[CellGroupData[{
Cell[920, 33, 152, 3, 67, "Section",ExpressionUUID->"2ca3cfd3-74c7-47aa-993a-09c545fdb199"],
Cell[1075, 38, 222, 5, 29, "Input",ExpressionUUID->"639ffec2-3012-479f-be76-6fd94a7ec33a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1334, 48, 79, 0, 67, "Section",ExpressionUUID->"69ba7aca-a4ce-40bf-8c3f-485e1726500d"],
Cell[CellGroupData[{
Cell[1438, 52, 266, 7, 32, "Item",ExpressionUUID->"ee490cc3-75ae-4390-9f99-ce31f74261ba"],
Cell[1707, 61, 209, 3, 29, "Input",ExpressionUUID->"65babb58-5c29-41fb-b4d1-1d5ecdbbd64f"],
Cell[1919, 66, 391, 8, 50, "Input",ExpressionUUID->"5fbb334c-6648-447d-98b7-95603981f576"],
Cell[2313, 76, 389, 8, 50, "Input",ExpressionUUID->"410bda6c-a947-4150-afeb-44e44ea8a62b"],
Cell[2705, 86, 900, 14, 50, "Input",ExpressionUUID->"9b31e9ce-d018-4980-8db5-5d687f883b46"],
Cell[3608, 102, 963, 16, 50, "Input",ExpressionUUID->"447c1e8d-e39b-462e-a9c6-5fc02f8816c4"],
Cell[CellGroupData[{
Cell[4596, 122, 392, 8, 54, "Code",ExpressionUUID->"8e7f1e69-6c8d-4a11-9221-ff4b107368b1",
 InitializationCell->False],
Cell[4991, 132, 2191, 32, 994, "Output",ExpressionUUID->"1002e8e7-bb18-4d64-8f7f-cf54308d1300"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

