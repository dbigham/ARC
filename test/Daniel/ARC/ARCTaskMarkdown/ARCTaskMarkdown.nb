(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     11187,        277]
NotebookOptionsPosition[      4587,        121]
NotebookOutlinePosition[     10095,        257]
CellTagsIndexPosition[     10052,        254]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["ARCTaskMarkdown", "Title",ExpressionUUID->"97ccada2-3a43-4e8a-a228-426aa37480ee"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"RunUnitTests", "[", "ARCTaskMarkdown", "]"}]}], "Code",
 InitializationCell->
  False,ExpressionUUID->"1dabb0f9-608c-4b55-b80d-7dbdedf317b7"],

Cell[CellGroupData[{

Cell["Links", "Section",
 CellChangeTimes->{{3.868965771670374*^9, 
  3.8689657721509185`*^9}},ExpressionUUID->"2ca3cfd3-74c7-47aa-993a-\
09c545fdb199"],

Cell[BoxData[
 RowBox[{"FunctionNotebook", "[", "ARCImplementedTasksMarkdown", 
  "]"}]], "Input",
 CellChangeTimes->{3.86896580874201*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"639ffec2-3012-479f-be76-6fd94a7ec33a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tests", "Section",ExpressionUUID->"69ba7aca-a4ce-40bf-8c3f-485e1726500d"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["NOTE",
  FontWeight->"Bold"],
 ": I\[CloseCurlyQuote]ve been struggling with Mathematica freezing."
}], "Item",
 CellChangeTimes->{{3.8689650148319726`*^9, 
  3.868965023091016*^9}},ExpressionUUID->"ee490cc3-75ae-4390-9f99-\
ce31f74261ba"],

Cell[BoxData[
 RowBox[{"<<", " ", "Daniel`ARC`"}]], "Input",
 CellChangeTimes->{{3.8689611597062044`*^9, 3.8689611619622364`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"65babb58-5c29-41fb-b4d1-1d5ecdbbd64f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"example", " ", "=", " ", "\"\<0ca9ddb6\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Lui", "[", "example", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8689649380423017`*^9, 3.8689649396500463`*^9}, 
   3.868965012385483*^9, 3.8689652453048477`*^9, 3.8689656304820895`*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"5fbb334c-6648-447d-98b7-95603981f576"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"example", " ", "=", " ", "\"\<3c9b0459\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Lui", "[", "example", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8689649380423017`*^9, 3.8689649396500463`*^9}, 
   3.868965012385483*^9, 3.8689652453048477`*^9},
 CellLabel->"In[36]:=",ExpressionUUID->"410bda6c-a947-4150-afeb-44e44ea8a62b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"ARCTaskMarkdown", "[", "example", "]"}]}], "Code",
 InitializationCell->False,
 CellChangeTimes->{
  3.8689542974348593`*^9, {3.8689649487869816`*^9, 3.8689649634900265`*^9}, {
   3.8689650111231766`*^9, 3.8689650115775943`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"8e7f1e69-6c8d-4a11-9221-ff4b107368b1"],

Cell[BoxData["\<\"# 0ca9ddb6\\n\\n## Examples\\n\\n![ARC examples for \
0ca9ddb6](examples.png?raw=true)\\n\\n## Rules (DSL)\\n\\n![DSL rules for \
0ca9ddb6](rules.png?raw=true)\\n\\n## Notes\\n\\n### Finding \
Rules\\n\\n\\n#### Scene Parsing\\n\\n* We parse the input and output scenes \
into objects.\\n* In the output scenes, the multi-color objects are parsed \
into a form that specifies their colored components:\\n\\n![image \
1](image1.png?raw=true)\\n\\n#### Mapping Input Objects to Output \
Objects\\n\\nIn cases where an output object contains a component which was \
an object in the input, we produce a mapping between the objects, and specify \
an AddComponents transform.\\n\\ne.g.\\n\\n\\n![image 2](image2.png?raw=true)\
\\n\\n#### Finding Rules from Object Mappings\\n\\n* We notice that if we \
group the object mappings by the color of their input object, the \
transformation applied is consistent.\\n   * For red, a particular \
AddComponents transform is needed.\\n   * For blue, a particular \
AddComponents transform is needed.\\n   * For any other color, the output \
object is the same as the input object.\"\>"], "Output",
 CellChangeTimes->{
  3.8689649449325647`*^9, 3.8689651032264614`*^9, 3.868965255880374*^9, {
   3.8689656346787014`*^9, 3.8689656388795834`*^9}, 3.8689659650549088`*^9, 
   3.868966853023559*^9, 3.86896689213899*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"1093b55c-8918-4356-b4d5-e9cb33402a93"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{718.5, 735.},
WindowMargins->{{-5.25, Automatic}, {Automatic, 0}},
Visible->True,
DockedCells->{
  Cell[
   BoxData[
    DynamicBox[
     ToBoxes[
      Column[{
        Row[{
          Button["New Test", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`NewFunctionCell[Daniel`ARC`ARCTaskMarkdown], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687]], ImageSize -> {95., 40}, 
           Method -> "Queued"], " ", 
          Button["Add Tests to File", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`CreateUnitTests[
            Daniel`ARC`ARCTaskMarkdown, "SubTest" -> None], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687]], ImageSize -> {162.5, 40}, 
           Method -> "Queued"], " ", 
          Button[
          "Run Tests", 
           DevTools`TestingTools`RunUnitTestsInNotebook[
            Daniel`ARC`ARCTaskMarkdown]; Null, ImageSize -> {102.5, 40}, 
           Method -> "Queued"], " ", 
          Button["Edit Tests", 
           DevTools`TestingTools`EditUnitTests[Daniel`ARC`ARCTaskMarkdown], 
           ImageSize -> {110., 40}, Method -> "Queued"], " ", 
          Button["Edit Function", 
           DevTools`SourceTools`EditFunction[Daniel`ARC`ARCTaskMarkdown], 
           ImageSize -> {132.5, 40}, Method -> "Queued"], " ", 
          Row[{
            
            DynamicModule[{
             DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
              "Capture"}, 
             Button[
              Dynamic[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel], 
              If[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel === 
               "Capture", 
               DevTools`TestingTools`FunctionCapture`EnableFunctionCapture[
                Daniel`ARC`ARCTaskMarkdown]; 
               DevTools`TestingTools`FunctionCapture`\
RegisterFunctionCaptureNotebook[Daniel`ARC`ARCTaskMarkdown, 
                 InputNotebook[]]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Release"; Null, 
               DevTools`TestingTools`FunctionCapture`DisableFunctionCapture[
                Daniel`ARC`ARCTaskMarkdown]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Capture"; Null], ImageSize -> {100, 40}, Method -> "Queued"],
              DynamicModuleValues :> {}], 
            Button["?", 
             DevTools`TestingTools`FunctionCapture`CaptureFunctionHelp[], 
             ImageSize -> {30, 40}, Method -> "Queued"]}], " ", 
          Row[{
            Button["<", 
             DevTools`NotebookTools`MoveNotebook["Left"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"], 
            Button[">", 
             DevTools`NotebookTools`MoveNotebook["Right"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"]}]}], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687; If[
          And[
           ValueQ[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687], 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687 =!= "", 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687 =!= Null], 
          (If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {"MaxHeight" -> 300},
              "NakedSection"]], 
           Framed[#, FrameStyle -> None, FrameMargins -> 2], 
           
           Framed[#, FrameStyle -> LightGray, Background -> White, 
            FrameMargins -> 15]]& )[
           Grid[{{
              Pane[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687, "ImageSize" -> {Full, {0, 
                  OptionValue[
                  DevTools`NotebookTools`DynamicOutputSection, {
                   "MaxHeight" -> 300}, "MaxHeight"]}}, Scrollbars -> 
               Automatic, FrameMargins -> 0]}, 
             If[
              TrueQ[
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {
                "MaxHeight" -> 300}, "NakedSection"]], 
              Apply[Sequence, {}], {
               Button[
               "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687 = "", 
                ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
            Alignment -> {Left, Top}]], 
          Apply[Sequence, {}]]}], StandardForm], 
     TrackedSymbols :> {
      DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687}]], "DockedCell"]},
TaggingRules->{
 "CreateNamedNotebook2Args" -> {
   "ARCTaskMarkdown", "Type" -> "Function", 
    "GenerateNotebookArgs" -> {"Function" -> Daniel`ARC`ARCTaskMarkdown}, 
    "ReturnNotebook" -> True}},
InputAutoReplacements->{},
FrontEndVersion->"13.1 for Microsoft Windows (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"09946e10-fd80-464b-ae3e-deb44a6ed03e"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 87, 0, 98, "Title",ExpressionUUID->"97ccada2-3a43-4e8a-a228-426aa37480ee"],
Cell[670, 24, 225, 5, 52, "Code",ExpressionUUID->"1dabb0f9-608c-4b55-b80d-7dbdedf317b7",
 InitializationCell->False],
Cell[CellGroupData[{
Cell[920, 33, 152, 3, 67, "Section",ExpressionUUID->"2ca3cfd3-74c7-47aa-993a-09c545fdb199"],
Cell[1075, 38, 218, 4, 28, "Input",ExpressionUUID->"639ffec2-3012-479f-be76-6fd94a7ec33a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1330, 47, 79, 0, 67, "Section",ExpressionUUID->"69ba7aca-a4ce-40bf-8c3f-485e1726500d"],
Cell[CellGroupData[{
Cell[1434, 51, 266, 7, 32, "Item",ExpressionUUID->"ee490cc3-75ae-4390-9f99-ce31f74261ba"],
Cell[1703, 60, 208, 3, 28, "Input",ExpressionUUID->"65babb58-5c29-41fb-b4d1-1d5ecdbbd64f"],
Cell[1914, 65, 386, 7, 48, "Input",ExpressionUUID->"5fbb334c-6648-447d-98b7-95603981f576"],
Cell[2303, 74, 363, 7, 48, "Input",ExpressionUUID->"410bda6c-a947-4150-afeb-44e44ea8a62b"],
Cell[CellGroupData[{
Cell[2691, 85, 392, 8, 52, "Code",ExpressionUUID->"8e7f1e69-6c8d-4a11-9221-ff4b107368b1",
 InitializationCell->False],
Cell[3086, 95, 1449, 20, 794, "Output",ExpressionUUID->"1093b55c-8918-4356-b4d5-e9cb33402a93"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

