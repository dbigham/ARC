(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     15630,        357]
NotebookOptionsPosition[      8809,        197]
NotebookOutlinePosition[     14312,        333]
CellTagsIndexPosition[     14269,        330]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["ARCTaskMarkdown", "Title",ExpressionUUID->"97ccada2-3a43-4e8a-a228-426aa37480ee"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"RunUnitTests", "[", "ARCTaskMarkdown", "]"}]}], "Code",
 InitializationCell->
  False,ExpressionUUID->"1dabb0f9-608c-4b55-b80d-7dbdedf317b7"],

Cell[CellGroupData[{

Cell["Links", "Section",
 CellChangeTimes->{{3.868965771670374*^9, 
  3.8689657721509185`*^9}},ExpressionUUID->"2ca3cfd3-74c7-47aa-993a-\
09c545fdb199"],

Cell[BoxData[
 RowBox[{"FunctionNotebook", "[", "ARCImplementedTasksMarkdown", 
  "]"}]], "Input",
 CellChangeTimes->{3.86896580874201*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"639ffec2-3012-479f-be76-6fd94a7ec33a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tests", "Section",ExpressionUUID->"69ba7aca-a4ce-40bf-8c3f-485e1726500d"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["NOTE",
  FontWeight->"Bold"],
 ": I\[CloseCurlyQuote]ve been struggling with Mathematica freezing."
}], "Item",
 CellChangeTimes->{{3.8689650148319726`*^9, 
  3.868965023091016*^9}},ExpressionUUID->"ee490cc3-75ae-4390-9f99-\
ce31f74261ba"],

Cell[BoxData[
 RowBox[{"<<", " ", "Daniel`ARC`"}]], "Input",
 CellChangeTimes->{{3.8689611597062044`*^9, 3.8689611619622364`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"65babb58-5c29-41fb-b4d1-1d5ecdbbd64f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"example", " ", "=", " ", "\"\<0ca9ddb6\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Lui", "[", "example", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8689649380423017`*^9, 3.8689649396500463`*^9}, 
   3.868965012385483*^9, 3.8689652453048477`*^9, 3.8689656304820895`*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"5fbb334c-6648-447d-98b7-95603981f576"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"example", " ", "=", " ", "\"\<3c9b0459\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Lui", "[", "example", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8689649380423017`*^9, 3.8689649396500463`*^9}, 
   3.868965012385483*^9, 3.8689652453048477`*^9},
 CellLabel->"In[36]:=",ExpressionUUID->"410bda6c-a947-4150-afeb-44e44ea8a62b"],

Cell[BoxData["\<\"## Tasks Implemented\\n\\n### Core ARC Training \
Tasks\\n\\n* [0ca9ddb6](TaskNotes/0ca9ddb6/notes.md)\\n* \
[3c9b0459](TaskNotes/3c9b0459/notes.md)\\n* \
[1caeab9d](TaskNotes/1caeab9d/notes.md)\\n* \
[b60334d2](TaskNotes/b60334d2/notes.md)\\n* \
[25ff71a9](TaskNotes/25ff71a9/notes.md)\\n* \
[3ac3eb23](TaskNotes/3ac3eb23/notes.md)\\n* \
[e76a88a6](TaskNotes/e76a88a6/notes.md)\\n* \
[c0f76784](TaskNotes/c0f76784/notes.md)\\n* \
[321b1fc6](TaskNotes/321b1fc6/notes.md)\\n* \
[05f2a901](TaskNotes/05f2a901/notes.md)\\n* \
[08ed6ac7](TaskNotes/08ed6ac7/notes.md)\\n* \
[a61f2674](TaskNotes/a61f2674/notes.md)\\n\\n### Personally Created Training \
Tasks\\n\\n* [jnohuorzh-easier](TaskNotes/jnohuorzh-easier/notes.md)\\n* \
[ihiz27k2n](TaskNotes/ihiz27k2n/notes.md)\\n* \
[jnohuorzh](TaskNotes/jnohuorzh/notes.md)\\n* \
[0uduqqj6f](TaskNotes/0uduqqj6f/notes.md)\\n* \
[2wfys5w64](TaskNotes/2wfys5w64/notes.md)\\n* \
[2wfys5w64-relative-right-side](TaskNotes/2wfys5w64-relative-right-side/notes.\
md)\\n* [n1hczotml](TaskNotes/n1hczotml/notes.md)\\n\\n## Tasks Passing via \
Generalization\\n\\n### Training Tasks\\n\\nThe following ARC training tasks \
started passing after some different task was implemented.\\n\\n* \
[ea32f347](TaskNotes/ea32f347/notes.md)\\n\\n### Evaluation Tasks\\n\\nThe \
following ARC evaluation tasks are passing. Evaluation tasks have not been \
analyzed or implemented specifically.\\n\\n* \
[84f2aca1](TaskNotes/84f2aca1/notes.md)\"\>"], "Output",
 CellChangeTimes->{
  3.868963274491413*^9, 3.868963354403633*^9, {3.8689637509692574`*^9, 
   3.8689637849733963`*^9}, 3.868963861963874*^9, {3.868963909338173*^9, 
   3.8689639390164165`*^9}, {3.8689639711675625`*^9, 3.868964024133667*^9}, {
   3.868964386692843*^9, 3.8689644208448353`*^9}, {3.868964456606146*^9, 
   3.868964482799322*^9}, {3.868964548504091*^9, 3.868964592362439*^9}, 
   3.868964628694541*^9, 3.86896581216848*^9, 3.868967522587689*^9, 
   3.868975635289811*^9},
 CellLabel->
  "Out[138]=",ExpressionUUID->"90ed3bed-b940-4b66-93e3-f6927d346926"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"example", " ", "=", " ", "\"\<08ed6ac7\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Lui", "[", "example", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8689649380423017`*^9, 3.8689649396500463`*^9}, 
   3.868965012385483*^9, 3.8689652453048477`*^9, 3.868967307532199*^9, {
   3.868967344660019*^9, 3.868967511631118*^9}, 3.8689765094326515`*^9, 
   3.868977099262747*^9, 3.868977891746933*^9, {3.8689789436069107`*^9, 
   3.868978943919848*^9}, 3.868979118437803*^9, 3.868979236910008*^9, 
   3.868979644227228*^9, 3.868980051438182*^9, 3.86898084626181*^9, 
   3.8689817710006275`*^9},
 CellLabel->
  "In[248]:=",ExpressionUUID->"9b31e9ce-d018-4980-8db5-5d687f883b46"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"ARCTaskMarkdown", "[", "example", "]"}]}], "Code",
 InitializationCell->False,
 CellChangeTimes->{
  3.8689542974348593`*^9, {3.8689649487869816`*^9, 3.8689649634900265`*^9}, {
   3.8689650111231766`*^9, 3.8689650115775943`*^9}},
 CellLabel->
  "In[260]:=",ExpressionUUID->"8e7f1e69-6c8d-4a11-9221-ff4b107368b1"],

Cell[BoxData["\<\"# 08ed6ac7\\n\\n## Examples\\n\\n![ARC examples for \
08ed6ac7](examples.png?raw=true)\\n\\n## Rules (DSL)\\n\\n![DSL rules for \
08ed6ac7](rules.png?raw=true)\\n\\n## Notes\\n\\n### Finding \
Rules\\n\\n\\n#### Scene Parsing\\n\\nWe parse the input and output scenes \
into objects.\\n\\n\\n#### Mapping Input Objects to Output Objects\\n\\nFor \
each input object, there is only one object in the output scene with a \
matching position and shape, making it straightforward to produce a mapping \
from input objects to output objects.\\n\\ne.g.\\n\\n\\n![image \
1](image1.png?raw=true)\\n\\n\\n#### Finding Rules from Object \
Mappings\\n\\n* Before looking for rules, we prune the outputs of the \
mappings to keep only those properties that are being modified. We notice \
that the shape is always the same, it is just the \
\[OpenCurlyDoubleQuote]Colors\[CloseCurlyDoubleQuote] property that is \
changing.\\n* When the objects are grouped by HeightRank, we notice that the \
\[OpenCurlyDoubleQuote]Colors\[CloseCurlyDoubleQuote] property can be \
determined.\\n   * If the HeightRank of an object is 1, it means that it is \
the shortest object.\\n   * If the HeightRank of an object is 2, it means \
that it is the second shortest object.\\n   * etc.\\n\\n![image \
2](image2.png?raw=true)\\n\\n\\n#### Some Notes on Input Object Properties\\n\
\\n* For each input object, we populate a long list of property values which \
can be used for potential rule formation. (e.g. Y, X, Height, Width, \
etc.)\\n* We then supplement those properties, if they are numeric, with \
corresponding \[OpenCurlyDoubleQuote]Rank\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]InverseRank\[CloseCurlyDoubleQuote] properties.\\n* \
Here is an example input object with each of its properties:\\n\\n![image \
3](image3.png?raw=true)\\n\"\>"], "Output",
 CellChangeTimes->{
  3.8689649449325647`*^9, 3.8689651032264614`*^9, 3.868965255880374*^9, {
   3.8689656346787014`*^9, 3.8689656388795834`*^9}, 3.8689659650549088`*^9, 
   3.868966853023559*^9, 3.86896689213899*^9, {3.868966953221799*^9, 
   3.8689670088189487`*^9}, 3.86896706914168*^9, {3.8689671609215584`*^9, 
   3.8689672071654654`*^9}, 3.868967311405991*^9, {3.8689673495128994`*^9, 
   3.8689675138842382`*^9}, 3.8689765126673613`*^9, 3.868977031270672*^9, 
   3.868977780794986*^9, 3.8689784619276056`*^9, {3.8689785035682154`*^9, 
   3.8689785306254764`*^9}, 3.868978675981266*^9, {3.8689788078449306`*^9, 
   3.868978837780882*^9}, 3.8689791206022277`*^9, 3.868979551490037*^9, 
   3.8689799044929323`*^9, 3.8689799416723495`*^9, 3.868980053996606*^9, 
   3.8689802964063625`*^9, 3.868980387084422*^9, 3.8689815327577944`*^9, 
   3.8689817425868883`*^9, 3.868982223234877*^9, 3.868982479082567*^9},
 CellLabel->
  "Out[261]=",ExpressionUUID->"7f0f35aa-e093-432c-9ebd-e07b53221c0b"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{900, 722},
WindowMargins->{{-7., Automatic}, {Automatic, 0}},
Visible->True,
DockedCells->{
  Cell[
   BoxData[
    DynamicBox[
     ToBoxes[
      Column[{
        Row[{
          Button["New Test", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`NewFunctionCell[Daniel`ARC`ARCTaskMarkdown], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687]], ImageSize -> {95., 40}, 
           Method -> "Queued"], " ", 
          Button["Add Tests to File", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`CreateUnitTests[
            Daniel`ARC`ARCTaskMarkdown, "SubTest" -> None], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687]], ImageSize -> {162.5, 40}, 
           Method -> "Queued"], " ", 
          Button[
          "Run Tests", 
           DevTools`TestingTools`RunUnitTestsInNotebook[
            Daniel`ARC`ARCTaskMarkdown]; Null, ImageSize -> {102.5, 40}, 
           Method -> "Queued"], " ", 
          Button["Edit Tests", 
           DevTools`TestingTools`EditUnitTests[Daniel`ARC`ARCTaskMarkdown], 
           ImageSize -> {110., 40}, Method -> "Queued"], " ", 
          Button["Edit Function", 
           DevTools`SourceTools`EditFunction[Daniel`ARC`ARCTaskMarkdown], 
           ImageSize -> {132.5, 40}, Method -> "Queued"], " ", 
          Row[{
            
            DynamicModule[{
             DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
              "Capture"}, 
             Button[
              Dynamic[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel], 
              If[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel === 
               "Capture", 
               DevTools`TestingTools`FunctionCapture`EnableFunctionCapture[
                Daniel`ARC`ARCTaskMarkdown]; 
               DevTools`TestingTools`FunctionCapture`\
RegisterFunctionCaptureNotebook[Daniel`ARC`ARCTaskMarkdown, 
                 InputNotebook[]]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Release"; Null, 
               DevTools`TestingTools`FunctionCapture`DisableFunctionCapture[
                Daniel`ARC`ARCTaskMarkdown]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Capture"; Null], ImageSize -> {100, 40}, Method -> "Queued"],
              DynamicModuleValues :> {}], 
            Button["?", 
             DevTools`TestingTools`FunctionCapture`CaptureFunctionHelp[], 
             ImageSize -> {30, 40}, Method -> "Queued"]}], " ", 
          Row[{
            Button["<", 
             DevTools`NotebookTools`MoveNotebook["Left"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"], 
            Button[">", 
             DevTools`NotebookTools`MoveNotebook["Right"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"]}]}], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687; If[
          And[
           ValueQ[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687], 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687 =!= "", 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687 =!= Null], 
          (If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {"MaxHeight" -> 300},
              "NakedSection"]], 
           Framed[#, FrameStyle -> None, FrameMargins -> 2], 
           
           Framed[#, FrameStyle -> LightGray, Background -> White, 
            FrameMargins -> 15]]& )[
           Grid[{{
              Pane[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687, "ImageSize" -> {Full, {0, 
                  OptionValue[
                  DevTools`NotebookTools`DynamicOutputSection, {
                   "MaxHeight" -> 300}, "MaxHeight"]}}, Scrollbars -> 
               Automatic, FrameMargins -> 0]}, 
             If[
              TrueQ[
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {
                "MaxHeight" -> 300}, "NakedSection"]], 
              Apply[Sequence, {}], {
               Button[
               "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687 = "", 
                ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
            Alignment -> {Left, Top}]], 
          Apply[Sequence, {}]]}], StandardForm], 
     TrackedSymbols :> {
      DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202288926101536687}]], "DockedCell"]},
TaggingRules->{
 "CreateNamedNotebook2Args" -> {
   "ARCTaskMarkdown", "Type" -> "Function", 
    "GenerateNotebookArgs" -> {"Function" -> Daniel`ARC`ARCTaskMarkdown}, 
    "ReturnNotebook" -> True}},
InputAutoReplacements->{},
FrontEndVersion->"13.1 for Microsoft Windows (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"09946e10-fd80-464b-ae3e-deb44a6ed03e"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 87, 0, 98, "Title",ExpressionUUID->"97ccada2-3a43-4e8a-a228-426aa37480ee"],
Cell[670, 24, 225, 5, 52, "Code",ExpressionUUID->"1dabb0f9-608c-4b55-b80d-7dbdedf317b7",
 InitializationCell->False],
Cell[CellGroupData[{
Cell[920, 33, 152, 3, 67, "Section",ExpressionUUID->"2ca3cfd3-74c7-47aa-993a-09c545fdb199"],
Cell[1075, 38, 218, 4, 28, "Input",ExpressionUUID->"639ffec2-3012-479f-be76-6fd94a7ec33a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1330, 47, 79, 0, 67, "Section",ExpressionUUID->"69ba7aca-a4ce-40bf-8c3f-485e1726500d"],
Cell[CellGroupData[{
Cell[1434, 51, 266, 7, 32, "Item",ExpressionUUID->"ee490cc3-75ae-4390-9f99-ce31f74261ba"],
Cell[1703, 60, 209, 3, 28, "Input",ExpressionUUID->"65babb58-5c29-41fb-b4d1-1d5ecdbbd64f"],
Cell[1915, 65, 386, 7, 48, "Input",ExpressionUUID->"5fbb334c-6648-447d-98b7-95603981f576"],
Cell[CellGroupData[{
Cell[2326, 76, 363, 7, 48, "Input",ExpressionUUID->"410bda6c-a947-4150-afeb-44e44ea8a62b"],
Cell[2692, 85, 2064, 35, 794, "Output",ExpressionUUID->"90ed3bed-b940-4b66-93e3-f6927d346926"]
}, Open  ]],
Cell[4771, 123, 704, 13, 48, "Input",ExpressionUUID->"9b31e9ce-d018-4980-8db5-5d687f883b46"],
Cell[CellGroupData[{
Cell[5500, 140, 396, 9, 52, "Code",ExpressionUUID->"8e7f1e69-6c8d-4a11-9221-ff4b107368b1",
 InitializationCell->False],
Cell[5899, 151, 2858, 40, 1041, "Output",ExpressionUUID->"7f0f35aa-e093-432c-9ebd-e07b53221c0b"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

