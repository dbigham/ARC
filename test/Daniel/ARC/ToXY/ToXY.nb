(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     11446,        298]
NotebookOptionsPosition[      5311,        148]
NotebookOutlinePosition[     10749,        284]
CellTagsIndexPosition[     10706,        281]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["ToXY", "Title",ExpressionUUID->"eb1a3334-4813-497b-bacb-fa8916b0781e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"RunUnitTests", "[", "ToXY", "]"}]}], "Code",
 InitializationCell->False,
 CellLabel->
  "In[997]:=",ExpressionUUID->"880769df-9f7f-496d-94e3-d736362cead2"],

Cell[CellGroupData[{

Cell["Tests", "Section",ExpressionUUID->"0d52dd84-2a88-42f4-b5f2-f235ccf2f6cd"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicBox[ToBoxes[
   Column[{
     Framed[
      Grid[{{
         Button["Run", 
          
          With[{DevTools`TestingTools`Private`res = 
            DevTools`TestingTools`Private`runButtonClicked[
             "ToXY-20220724-2GTJ08", Daniel`ARC`ToXY, 
              HoldComplete[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416142989067], 73844607]}, 
           If[
            FailureQ[DevTools`TestingTools`Private`res], 
            Print[DevTools`TestingTools`Private`res]]], 
          ImageSize -> {57.5, 25}, Method -> "Queued"], 
         Button[
         "Update", {"TestUiMarker", "TestId" -> "ToXY-20220724-2GTJ08"}; 
          DevTools`TestingTools`Private`updateTestClicked[
           "ToXY-20220724-2GTJ08", Daniel`ARC`ToXY, 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416142989067], "CellID" -> 73844607, 
            "SubTest" -> None], ImageSize -> {80., 25}, Method -> "Queued"], 
         Button["Open in Editor", 
          DevTools`TestingTools`Private`openInEditorClicked[
          "ToXY-20220724-2GTJ08", Daniel`ARC`ToXY, 
           HoldComplete[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416142989067], None], 
          ImageSize -> {140., 25}, Method -> "Queued"], 
         Row[{"ToXY-20220724-2GTJ08"}, ImageSize -> {Full, Automatic}, 
          Alignment -> {Right, Center}]}}], ImageSize -> {Full, Automatic}, 
      FrameStyle -> GrayLevel[0.8], FrameMargins -> 10], 
     DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416142989067; If[
       And[
        ValueQ[
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416142989067], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416142989067 =!= "", 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416142989067 =!= Null], 
       (If[
        TrueQ[
         OptionValue[
         DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
        Framed[#, FrameStyle -> None, FrameMargins -> 2], 
        Framed[#, FrameStyle -> LightGray, Background -> White, FrameMargins -> 
         15]]& )[
        Grid[{{
           Pane[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416142989067, "ImageSize" -> {Full, {0, 
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {}, 
                "MaxHeight"]}}, Scrollbars -> Automatic, FrameMargins -> 0]}, 
          If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
           Apply[Sequence, {}], {
            Button[
            "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416142989067 = "", 
             ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
         Alignment -> {Left, Top}]], 
       Apply[Sequence, {}]]}], StandardForm],
  ImageSizeCache->{840., {21., 27.}},
  TrackedSymbols:>{
   DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416142989067}]], "TestUI",
 CellMargins->{{65, 0}, {0, 0}},
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 GeneratedCell->False,
 CellChangeTimes->{
  3.867682468633531*^9},ExpressionUUID->"8264947e-a657-4e7c-9ce8-\
c65bb2ce37eb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"ToXY", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", " ", "2"}], "}"}], "]"}]}], "Code",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellChangeTimes->{{3.8676824316967897`*^9, 3.8676824326100025`*^9}, 
   3.867682468633531*^9},
 CellLabel->"In[1003]:=",
 CellID->73844607,
 "TestId" -> 
 "ToXY-20220724-2GTJ08",ExpressionUUID->"963784b5-8cd6-492a-903d-\
5ec08474efad"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Y\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"X\"\>", "\[Rule]", "2"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8676824329600644`*^9, 3.8676824668587914`*^9, 
  3.8676825418957033`*^9},
 CellLabel->
  "Out[1004]=",ExpressionUUID->"7a55e859-c7f6-49b6-9a2b-2691b39acb23"]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{958, 980},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
Visible->True,
DockedCells->{
  Cell[
   BoxData[
    DynamicBox[
     ToBoxes[
      Column[{
        Row[{
          Button["New Test", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`NewFunctionCell[Daniel`ARC`ToXY], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416134989059]], ImageSize -> {95., 40}, 
           Method -> "Queued"], " ", 
          Button["Add Tests to File", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`CreateUnitTests[
            Daniel`ARC`ToXY, "SubTest" -> None], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416134989059]], ImageSize -> {162.5, 40}, 
           Method -> "Queued"], " ", 
          Button[
          "Run Tests", 
           DevTools`TestingTools`RunUnitTestsInNotebook[Daniel`ARC`ToXY]; 
           Null, ImageSize -> {102.5, 40}, Method -> "Queued"], " ", 
          Button["Edit Tests", 
           DevTools`TestingTools`EditUnitTests[Daniel`ARC`ToXY], 
           ImageSize -> {110., 40}, Method -> "Queued"], " ", 
          Button["Edit Function", 
           DevTools`SourceTools`EditFunction[Daniel`ARC`ToXY], 
           ImageSize -> {132.5, 40}, Method -> "Queued"], " ", 
          Row[{
            
            DynamicModule[{
             DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
              "Capture"}, 
             Button[
              Dynamic[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel], 
              If[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel === 
               "Capture", 
               DevTools`TestingTools`FunctionCapture`EnableFunctionCapture[
                Daniel`ARC`ToXY]; 
               DevTools`TestingTools`FunctionCapture`\
RegisterFunctionCaptureNotebook[Daniel`ARC`ToXY, 
                 InputNotebook[]]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Release"; Null, 
               DevTools`TestingTools`FunctionCapture`DisableFunctionCapture[
                Daniel`ARC`ToXY]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Capture"; Null], ImageSize -> {100, 40}, Method -> "Queued"],
              DynamicModuleValues :> {}], 
            Button["?", 
             DevTools`TestingTools`FunctionCapture`CaptureFunctionHelp[], 
             ImageSize -> {30, 40}, Method -> "Queued"]}], " ", 
          Row[{
            Button["<", 
             DevTools`NotebookTools`MoveNotebook["Left"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"], 
            Button[">", 
             DevTools`NotebookTools`MoveNotebook["Right"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"]}]}], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416134989059; If[
          And[
           ValueQ[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416134989059], 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416134989059 =!= "", 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416134989059 =!= Null], 
          (If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {"MaxHeight" -> 300},
              "NakedSection"]], 
           Framed[#, FrameStyle -> None, FrameMargins -> 2], 
           
           Framed[#, FrameStyle -> LightGray, Background -> White, 
            FrameMargins -> 15]]& )[
           Grid[{{
              Pane[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416134989059, "ImageSize" -> {Full, {0, 
                  OptionValue[
                  DevTools`NotebookTools`DynamicOutputSection, {
                   "MaxHeight" -> 300}, "MaxHeight"]}}, Scrollbars -> 
               Automatic, FrameMargins -> 0]}, 
             If[
              TrueQ[
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {
                "MaxHeight" -> 300}, "NakedSection"]], 
              Apply[Sequence, {}], {
               Button[
               "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416134989059 = "", 
                ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
            Alignment -> {Left, Top}]], 
          Apply[Sequence, {}]]}], StandardForm], 
     TrackedSymbols :> {
      DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202272416134989059}]], "DockedCell"]},
TaggingRules->{
 "WelcomeScreenSettings" -> {"FEStarting" -> False}, 
  "CreateNamedNotebook2Args" -> {
   "ToXY", "Type" -> "Function", 
    "GenerateNotebookArgs" -> {"Function" -> Daniel`ARC`ToXY}, 
    "ReturnNotebook" -> True}},
InputAutoReplacements->{},
FrontEndVersion->"12.2 for Microsoft Windows (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"547a4fad-6450-41d0-9d5a-4cb9fd63d989"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 76, 0, 96, "Title",ExpressionUUID->"eb1a3334-4813-497b-bacb-fa8916b0781e"],
Cell[659, 24, 239, 6, 53, "Code",ExpressionUUID->"880769df-9f7f-496d-94e3-d736362cead2",
 InitializationCell->False],
Cell[CellGroupData[{
Cell[923, 34, 79, 0, 67, "Section",ExpressionUUID->"0d52dd84-2a88-42f4-b5f2-f235ccf2f6cd"],
Cell[CellGroupData[{
Cell[1027, 38, 3386, 79, 50, "TestUI",ExpressionUUID->"8264947e-a657-4e7c-9ce8-c65bb2ce37eb",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[4416, 119, 489, 14, 53, "Code",ExpressionUUID->"963784b5-8cd6-492a-903d-5ec08474efad",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellID->73844607]
}, Open  ]],
Cell[4920, 136, 363, 8, 32, "Output",ExpressionUUID->"7a55e859-c7f6-49b6-9a2b-2691b39acb23"]
}, Open  ]]
}, Open  ]]
}
]
*)

