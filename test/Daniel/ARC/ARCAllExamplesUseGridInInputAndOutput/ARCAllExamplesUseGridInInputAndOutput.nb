(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     12515,        313]
NotebookOptionsPosition[      5992,        157]
NotebookOutlinePosition[     11816,        299]
CellTagsIndexPosition[     11773,        296]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["ARCAllExamplesUseGridInInputAndOutput", "Title",ExpressionUUID->"469645cc-ee40-4633-a51b-fb6b635eb1f9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"RunUnitTests", "[", "ARCAllExamplesUseGridInInputAndOutput", 
  "]"}]}], "Code",
 InitializationCell->False,
 CellLabel->
  "In[3517]:=",ExpressionUUID->"50cfddde-92b1-41fb-9570-7a0e334ba7d8"],

Cell[CellGroupData[{

Cell["Tests", "Section",ExpressionUUID->"f72a7ed6-7a5d-4acd-a1ec-2f7491a99bf1"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicBox[ToBoxes[
   Column[{
     Framed[
      Grid[{{
         Button["Run", 
          
          With[{DevTools`TestingTools`Private`res = 
            DevTools`TestingTools`Private`runButtonClicked[
             "ARCAllExamplesUseGridInInputAndOutput-20220910-YYJ2LB", 
              Daniel`ARC`ARCAllExamplesUseGridInInputAndOutput, 
              HoldComplete[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151621168310], 82179928, "SubTest" -> 
              None]}, 
           If[
            FailureQ[DevTools`TestingTools`Private`res], 
            Print[DevTools`TestingTools`Private`res]]], 
          ImageSize -> {57.5, 25}, Method -> "Queued"], 
         Button[
         "Update", {
           "TestUiMarker", "TestId" -> 
            "ARCAllExamplesUseGridInInputAndOutput-20220910-YYJ2LB"}; 
          DevTools`TestingTools`Private`updateTestClicked[
           "ARCAllExamplesUseGridInInputAndOutput-20220910-YYJ2LB", 
            Daniel`ARC`ARCAllExamplesUseGridInInputAndOutput, 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151621168310], "CellID" -> 82179928, 
            "SubTest" -> None], ImageSize -> {80., 25}, Method -> "Queued"], 
         Button["Open in Editor", 
          DevTools`TestingTools`Private`openInEditorClicked[
          "ARCAllExamplesUseGridInInputAndOutput-20220910-YYJ2LB", 
           Daniel`ARC`ARCAllExamplesUseGridInInputAndOutput, 
           HoldComplete[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151621168310], 
           Utility`FilterOptions[
           "SubTest" -> None, 
            DevTools`TestingTools`Private`openInEditorClicked]], 
          ImageSize -> {140., 25}, Method -> "Queued"], 
         Row[{"ARCAllExamplesUseGridInInputAndOutput-20220910-YYJ2LB"}, 
          ImageSize -> {Full, Automatic}, Alignment -> {Right, Center}]}}], 
      ImageSize -> {Full, Automatic}, FrameStyle -> GrayLevel[0.8], 
      FrameMargins -> 10], 
     DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151621168310; If[
       And[
        ValueQ[
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151621168310], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151621168310 =!= "", 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151621168310 =!= Null], 
       (If[
        TrueQ[
         OptionValue[
         DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
        Framed[#, FrameStyle -> None, FrameMargins -> 2], 
        Framed[#, FrameStyle -> LightGray, Background -> White, FrameMargins -> 
         15]]& )[
        Grid[{{
           Pane[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151621168310, "ImageSize" -> {Full, {0, 
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {}, 
                "MaxHeight"]}}, Scrollbars -> Automatic, FrameMargins -> 0]}, 
          If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
           Apply[Sequence, {}], {
            Button[
            "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151621168310 = "", 
             ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
         Alignment -> {Left, Top}]], 
       Apply[Sequence, {}]]}], StandardForm],
  ImageSizeCache->{840., {21.8544921875, 27.1455078125}},
  TrackedSymbols:>{
   DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151621168310}]], "TestUI",
 CellMargins->{{65, 0}, {0, 0}},
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 GeneratedCell->False,
 CellChangeTimes->{
  3.8718261807155714`*^9},ExpressionUUID->"86a9be25-94f6-48ff-8307-\
7b06035102e7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"ARCAllExamplesUseGridInInputAndOutput", "[", "\n", "\t", 
  RowBox[{"ARCParseInputAndOutputScenes", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"ARCParseFile", "[", "\"\<272f95fa\>\"", "]"}], "[", 
    "\"\<Train\>\"", "]"}], "\n", "\t", "]"}], "\n", "]"}]}], "Code",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellChangeTimes->{{3.8718260574951534`*^9, 3.871826058683978*^9}, {
  3.8718261652684803`*^9, 3.8718261807155714`*^9}},
 CellLabel->"In[3560]:=",
 CellID->82179928,
 "TestId" -> 
 "ARCAllExamplesUseGridInInputAndOutput-20220910-YYJ2LB",ExpressionUUID->\
"b1ed1e47-d90f-4c5e-ab24-d06c59902b61"]
}, Open  ]],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.8718260591815414`*^9, 3.8718261731043434`*^9, 
  3.871827755877861*^9},
 CellLabel->
  "Out[3561]=",ExpressionUUID->"7d7bbe01-711b-449a-af63-9fbc56731b44"]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{958, 980},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
Visible->True,
DockedCells->{
  Cell[
   BoxData[
    DynamicBox[
     ToBoxes[
      Column[{
        Row[{
          Button["New Test", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`NewFunctionCell[
            Daniel`ARC`ARCAllExamplesUseGridInInputAndOutput], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151113168269]], ImageSize -> {95., 40}, 
           Method -> "Queued"], " ", 
          Button["Add Tests to File", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`CreateUnitTests[
            Daniel`ARC`ARCAllExamplesUseGridInInputAndOutput, "SubTest" -> 
             None], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151113168269]], ImageSize -> {162.5, 40}, 
           Method -> "Queued"], " ", 
          Button[
          "Run Tests", 
           DevTools`TestingTools`RunUnitTestsInNotebook[
            Daniel`ARC`ARCAllExamplesUseGridInInputAndOutput]; Null, 
           ImageSize -> {102.5, 40}, Method -> "Queued"], " ", 
          Button["Edit Tests", 
           DevTools`TestingTools`EditUnitTests[
           Daniel`ARC`ARCAllExamplesUseGridInInputAndOutput, "SubTest" -> 
            None], ImageSize -> {110., 40}, Method -> "Queued"], " ", 
          Button["Edit Function", 
           DevTools`SourceTools`EditFunction[
           Daniel`ARC`ARCAllExamplesUseGridInInputAndOutput], 
           ImageSize -> {132.5, 40}, Method -> "Queued"], " ", 
          Row[{
            
            DynamicModule[{
             DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
              "Capture"}, 
             Button[
              Dynamic[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel], 
              If[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel === 
               "Capture", 
               DevTools`TestingTools`FunctionCapture`EnableFunctionCapture[
                Daniel`ARC`ARCAllExamplesUseGridInInputAndOutput]; 
               DevTools`TestingTools`FunctionCapture`\
RegisterFunctionCaptureNotebook[
                Daniel`ARC`ARCAllExamplesUseGridInInputAndOutput, 
                 InputNotebook[]]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Release"; Null, 
               DevTools`TestingTools`FunctionCapture`DisableFunctionCapture[
                Daniel`ARC`ARCAllExamplesUseGridInInputAndOutput]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Capture"; Null], ImageSize -> {100, 40}, Method -> "Queued"],
              DynamicModuleValues :> {}], 
            Button["?", 
             DevTools`TestingTools`FunctionCapture`CaptureFunctionHelp[], 
             ImageSize -> {30, 40}, Method -> "Queued"]}], " ", 
          Row[{
            Button["<", 
             DevTools`NotebookTools`MoveNotebook["Left"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"], 
            Button[">", 
             DevTools`NotebookTools`MoveNotebook["Right"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"]}]}], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151113168269; If[
          And[
           ValueQ[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151113168269], 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151113168269 =!= "", 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151113168269 =!= Null], 
          (If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {"MaxHeight" -> 300},
              "NakedSection"]], 
           Framed[#, FrameStyle -> None, FrameMargins -> 2], 
           
           Framed[#, FrameStyle -> LightGray, Background -> White, 
            FrameMargins -> 15]]& )[
           Grid[{{
              Pane[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151113168269, "ImageSize" -> {Full, {0, 
                  OptionValue[
                  DevTools`NotebookTools`DynamicOutputSection, {
                   "MaxHeight" -> 300}, "MaxHeight"]}}, Scrollbars -> 
               Automatic, FrameMargins -> 0]}, 
             If[
              TrueQ[
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {
                "MaxHeight" -> 300}, "NakedSection"]], 
              Apply[Sequence, {}], {
               Button[
               "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151113168269 = "", 
                ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
            Alignment -> {Left, Top}]], 
          Apply[Sequence, {}]]}], StandardForm], 
     TrackedSymbols :> {
      DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable2022910151113168269}]], "DockedCell"]},
TaggingRules->{
 "CreateNamedNotebook2Args" -> {
   "ARCAllExamplesUseGridInInputAndOutput", "Type" -> "Function", 
    "GenerateNotebookArgs" -> {
     "Function" -> Daniel`ARC`ARCAllExamplesUseGridInInputAndOutput}, 
    "ReturnNotebook" -> True}},
InputAutoReplacements->{},
FrontEndVersion->"12.3 for Microsoft Windows (64-bit) (July 9, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"085b79a6-d8c1-497c-9dbd-7bb323d50c86"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 109, 0, 98, "Title",ExpressionUUID->"469645cc-ee40-4633-a51b-fb6b635eb1f9"],
Cell[692, 24, 276, 7, 54, "Code",ExpressionUUID->"50cfddde-92b1-41fb-9570-7a0e334ba7d8",
 InitializationCell->False],
Cell[CellGroupData[{
Cell[993, 35, 79, 0, 67, "Section",ExpressionUUID->"f72a7ed6-7a5d-4acd-a1ec-2f7491a99bf1"],
Cell[CellGroupData[{
Cell[1097, 39, 3912, 89, 52, "TestUI",ExpressionUUID->"86a9be25-94f6-48ff-8307-7b06035102e7",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[5012, 130, 729, 16, 126, "Code",ExpressionUUID->"b1ed1e47-d90f-4c5e-ab24-d06c59902b61",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellID->82179928]
}, Open  ]],
Cell[5756, 149, 208, 4, 33, "Output",ExpressionUUID->"7d7bbe01-711b-449a-af63-9fbc56731b44"]
}, Open  ]]
}, Open  ]]
}
]
*)

