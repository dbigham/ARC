(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     16001,        405]
NotebookOptionsPosition[      9372,        248]
NotebookOutlinePosition[     14831,        382]
CellTagsIndexPosition[     14788,        379]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["SqrtButKeepSign", "Title",ExpressionUUID->"c91c0b4c-b828-4f8b-890b-46c4402cfb94"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"RunUnitTests", "[", "SqrtButKeepSign", "]"}]}], "Code",
 InitializationCell->False,
 CellLabel->
  "In[2099]:=",ExpressionUUID->"fd8524c1-0e9f-44d0-8047-04d04d8bb1ba"],

Cell[CellGroupData[{

Cell["Tests", "Section",ExpressionUUID->"901a6d3c-add2-4b05-b42a-1f4f9d169e8a"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicBox[ToBoxes[
   Column[{
     Framed[
      Grid[{{
         Button["Run", 
          
          With[{DevTools`TestingTools`Private`res = 
            DevTools`TestingTools`Private`runButtonClicked[
             "SqrtButKeepSign-20220826-R4ERP9", Daniel`ARC`SqrtButKeepSign, 
              HoldComplete[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484091], 15356840]}, 
           If[
            FailureQ[DevTools`TestingTools`Private`res], 
            Print[DevTools`TestingTools`Private`res]]], 
          ImageSize -> {57.5, 25}, Method -> "Queued"], 
         Button[
         "Update", {
           "TestUiMarker", "TestId" -> "SqrtButKeepSign-20220826-R4ERP9"}; 
          DevTools`TestingTools`Private`updateTestClicked[
           "SqrtButKeepSign-20220826-R4ERP9", Daniel`ARC`SqrtButKeepSign, 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484091], "CellID" -> 15356840, 
            "SubTest" -> None], ImageSize -> {80., 25}, Method -> "Queued"], 
         Button["Open in Editor", 
          DevTools`TestingTools`Private`openInEditorClicked[
          "SqrtButKeepSign-20220826-R4ERP9", Daniel`ARC`SqrtButKeepSign, 
           HoldComplete[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484091], None], 
          ImageSize -> {140., 25}, Method -> "Queued"], 
         Row[{"SqrtButKeepSign-20220826-R4ERP9"}, 
          ImageSize -> {Full, Automatic}, Alignment -> {Right, Center}]}}], 
      ImageSize -> {Full, Automatic}, FrameStyle -> GrayLevel[0.8], 
      FrameMargins -> 10], 
     DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484091; If[
       And[
        ValueQ[
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484091], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484091 =!= "", 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484091 =!= Null], 
       (If[
        TrueQ[
         OptionValue[
         DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
        Framed[#, FrameStyle -> None, FrameMargins -> 2], 
        Framed[#, FrameStyle -> LightGray, Background -> White, FrameMargins -> 
         15]]& )[
        Grid[{{
           Pane[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484091, "ImageSize" -> {Full, {0, 
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {}, 
                "MaxHeight"]}}, Scrollbars -> Automatic, FrameMargins -> 0]}, 
          If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
           Apply[Sequence, {}], {
            Button[
            "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484091 = "", 
             ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
         Alignment -> {Left, Top}]], 
       Apply[Sequence, {}]]}], StandardForm],
  ImageSizeCache->{840., {21.8544921875, 27.1455078125}},
  TrackedSymbols:>{
   DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484091}]], "TestUI",
 CellMargins->{{65, 0}, {0, 0}},
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 GeneratedCell->False,
 CellChangeTimes->{
  3.8705100256198177`*^9},ExpressionUUID->"b44fa83b-99ce-4d7d-b0cd-\
c95866fac361"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"SqrtButKeepSign", "[", "9", "]"}]}], "Code",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellChangeTimes->{{3.870510016177021*^9, 3.8705100256198177`*^9}},
 CellLabel->"In[2095]:=",
 CellID->15356840,
 "TestId" -> 
 "SqrtButKeepSign-20220826-R4ERP9",ExpressionUUID->"4b789f1d-1b53-4746-acda-\
0202b4369bef"]
}, Open  ]],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.8705100166907473`*^9},
 CellLabel->
  "Out[2096]=",ExpressionUUID->"7cd32f01-f523-414c-8140-f12abf983f12"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicBox[ToBoxes[
   Column[{
     Framed[
      Grid[{{
         Button["Run", 
          
          With[{DevTools`TestingTools`Private`res = 
            DevTools`TestingTools`Private`runButtonClicked[
             "SqrtButKeepSign-20220826-NCX238", Daniel`ARC`SqrtButKeepSign, 
              HoldComplete[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484094], 41166746]}, 
           If[
            FailureQ[DevTools`TestingTools`Private`res], 
            Print[DevTools`TestingTools`Private`res]]], 
          ImageSize -> {57.5, 25}, Method -> "Queued"], 
         Button[
         "Update", {
           "TestUiMarker", "TestId" -> "SqrtButKeepSign-20220826-NCX238"}; 
          DevTools`TestingTools`Private`updateTestClicked[
           "SqrtButKeepSign-20220826-NCX238", Daniel`ARC`SqrtButKeepSign, 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484094], "CellID" -> 41166746, 
            "SubTest" -> None], ImageSize -> {80., 25}, Method -> "Queued"], 
         Button["Open in Editor", 
          DevTools`TestingTools`Private`openInEditorClicked[
          "SqrtButKeepSign-20220826-NCX238", Daniel`ARC`SqrtButKeepSign, 
           HoldComplete[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484094], None], 
          ImageSize -> {140., 25}, Method -> "Queued"], 
         Row[{"SqrtButKeepSign-20220826-NCX238"}, 
          ImageSize -> {Full, Automatic}, Alignment -> {Right, Center}]}}], 
      ImageSize -> {Full, Automatic}, FrameStyle -> GrayLevel[0.8], 
      FrameMargins -> 10], 
     DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484094; If[
       And[
        ValueQ[
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484094], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484094 =!= "", 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484094 =!= Null], 
       (If[
        TrueQ[
         OptionValue[
         DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
        Framed[#, FrameStyle -> None, FrameMargins -> 2], 
        Framed[#, FrameStyle -> LightGray, Background -> White, FrameMargins -> 
         15]]& )[
        Grid[{{
           Pane[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484094, "ImageSize" -> {Full, {0, 
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {}, 
                "MaxHeight"]}}, Scrollbars -> Automatic, FrameMargins -> 0]}, 
          If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
           Apply[Sequence, {}], {
            Button[
            "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484094 = "", 
             ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
         Alignment -> {Left, Top}]], 
       Apply[Sequence, {}]]}], StandardForm],
  ImageSizeCache->{840., {21.8544921875, 27.1455078125}},
  TrackedSymbols:>{
   DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282694026484094}]], "TestUI",
 CellMargins->{{65, 0}, {0, 0}},
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 GeneratedCell->False,
 CellChangeTimes->{
  3.870510025911544*^9},ExpressionUUID->"9a37220a-e41c-4810-b480-\
d183b496dacc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"SqrtButKeepSign", "[", 
  RowBox[{"-", "9"}], "]"}]}], "Code",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellChangeTimes->{{3.870510016177021*^9, 3.870510025911544*^9}},
 CellLabel->"In[2097]:=",
 CellID->41166746,
 "TestId" -> 
 "SqrtButKeepSign-20220826-NCX238",ExpressionUUID->"9ac78f09-c58f-4800-bbb0-\
bdd7a523f633"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"-", "3"}]], "Output",
 CellChangeTimes->{3.870510020160219*^9},
 CellLabel->
  "Out[2098]=",ExpressionUUID->"b9359cea-3201-4155-b0eb-50fe52fc4e65"]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{958, 980},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   BoxData[
    DynamicBox[
     ToBoxes[
      Column[{
        Row[{
          Button["New Test", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`NewFunctionCell[Daniel`ARC`SqrtButKeepSign], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282693948484078]], ImageSize -> {95., 40}, 
           Method -> "Queued"], " ", 
          Button["Add Tests to File", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`CreateUnitTests[
            Daniel`ARC`SqrtButKeepSign, "SubTest" -> None], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282693948484078]], ImageSize -> {162.5, 40}, 
           Method -> "Queued"], " ", 
          Button[
          "Run Tests", 
           DevTools`TestingTools`RunUnitTestsInNotebook[
            Daniel`ARC`SqrtButKeepSign]; Null, ImageSize -> {102.5, 40}, 
           Method -> "Queued"], " ", 
          Button["Edit Tests", 
           DevTools`TestingTools`EditUnitTests[Daniel`ARC`SqrtButKeepSign], 
           ImageSize -> {110., 40}, Method -> "Queued"], " ", 
          Button["Edit Function", 
           DevTools`SourceTools`EditFunction[Daniel`ARC`SqrtButKeepSign], 
           ImageSize -> {132.5, 40}, Method -> "Queued"], " ", 
          Row[{
            
            DynamicModule[{
             DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
              "Capture"}, 
             Button[
              Dynamic[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel], 
              If[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel === 
               "Capture", 
               DevTools`TestingTools`FunctionCapture`EnableFunctionCapture[
                Daniel`ARC`SqrtButKeepSign]; 
               DevTools`TestingTools`FunctionCapture`\
RegisterFunctionCaptureNotebook[Daniel`ARC`SqrtButKeepSign, 
                 InputNotebook[]]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Release"; Null, 
               DevTools`TestingTools`FunctionCapture`DisableFunctionCapture[
                Daniel`ARC`SqrtButKeepSign]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Capture"; Null], ImageSize -> {100, 40}, Method -> "Queued"],
              DynamicModuleValues :> {}], 
            Button["?", 
             DevTools`TestingTools`FunctionCapture`CaptureFunctionHelp[], 
             ImageSize -> {30, 40}, Method -> "Queued"]}], " ", 
          Row[{
            Button["<", 
             DevTools`NotebookTools`MoveNotebook["Left"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"], 
            Button[">", 
             DevTools`NotebookTools`MoveNotebook["Right"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"]}]}], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282693948484078; If[
          And[
           ValueQ[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282693948484078], 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282693948484078 =!= "", 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282693948484078 =!= Null], 
          (If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {"MaxHeight" -> 300},
              "NakedSection"]], 
           Framed[#, FrameStyle -> None, FrameMargins -> 2], 
           
           Framed[#, FrameStyle -> LightGray, Background -> White, 
            FrameMargins -> 15]]& )[
           Grid[{{
              Pane[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282693948484078, "ImageSize" -> {Full, {0, 
                  OptionValue[
                  DevTools`NotebookTools`DynamicOutputSection, {
                   "MaxHeight" -> 300}, "MaxHeight"]}}, Scrollbars -> 
               Automatic, FrameMargins -> 0]}, 
             If[
              TrueQ[
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {
                "MaxHeight" -> 300}, "NakedSection"]], 
              Apply[Sequence, {}], {
               Button[
               "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282693948484078 = "", 
                ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
            Alignment -> {Left, Top}]], 
          Apply[Sequence, {}]]}], StandardForm], 
     TrackedSymbols :> {
      DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202282693948484078}]], "DockedCell"]},
TaggingRules->{
 "CreateNamedNotebook2Args" -> {
   "SqrtButKeepSign", "Type" -> "Function", 
    "GenerateNotebookArgs" -> {"Function" -> Daniel`ARC`SqrtButKeepSign}, 
    "ReturnNotebook" -> True}},
FrontEndVersion->"12.3 for Microsoft Windows (64-bit) (July 9, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"c7d0063c-a42a-4399-a017-62a27806dfcd"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 87, 0, 98, "Title",ExpressionUUID->"c91c0b4c-b828-4f8b-890b-46c4402cfb94"],
Cell[670, 24, 251, 6, 54, "Code",ExpressionUUID->"fd8524c1-0e9f-44d0-8047-04d04d8bb1ba",
 InitializationCell->False],
Cell[CellGroupData[{
Cell[946, 34, 79, 0, 67, "Section",ExpressionUUID->"901a6d3c-add2-4b05-b42a-1f4f9d169e8a"],
Cell[CellGroupData[{
Cell[1050, 38, 3515, 81, 52, "TestUI",ExpressionUUID->"b44fa83b-99ce-4d7d-b0cd-c95866fac361",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[4568, 121, 431, 11, 54, "Code",ExpressionUUID->"4b789f1d-1b53-4746-acda-0202b4369bef",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellID->15356840]
}, Open  ]],
Cell[5014, 135, 156, 3, 33, "Output",ExpressionUUID->"7cd32f01-f523-414c-8140-f12abf983f12"],
Cell[CellGroupData[{
Cell[5195, 142, 3513, 81, 52, "TestUI",ExpressionUUID->"9a37220a-e41c-4810-b480-d183b496dacc",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[8711, 225, 447, 12, 54, "Code",ExpressionUUID->"9ac78f09-c58f-4800-bbb0-bdd7a523f633",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellID->41166746]
}, Open  ]],
Cell[9173, 240, 171, 4, 33, "Output",ExpressionUUID->"b9359cea-3201-4155-b0eb-50fe52fc4e65"]
}, Open  ]]
}, Open  ]]
}
]
*)

