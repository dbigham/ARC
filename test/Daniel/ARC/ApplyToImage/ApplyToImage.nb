(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     18009,        464]
NotebookOptionsPosition[     11406,        307]
NotebookOutlinePosition[     16835,        441]
CellTagsIndexPosition[     16792,        438]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["ApplyToImage", "Title",ExpressionUUID->"22b79c60-f518-4d8f-865f-f7692e9b9853"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"RunUnitTests", "[", "ApplyToImage", "]"}]}], "Code",
 InitializationCell->False,
 CellLabel->
  "In[664]:=",ExpressionUUID->"debb9c29-8592-43ed-88db-33a1e0073628"],

Cell[CellGroupData[{

Cell["Tests", "Section",ExpressionUUID->"21f953cb-8d02-49d0-8f2a-3ee2a65f7355"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicBox[ToBoxes[
   Column[{
     Framed[
      Grid[{{
         Button["Run", 
          
          With[{DevTools`TestingTools`Private`res = 
            DevTools`TestingTools`Private`runButtonClicked[
             "ApplyToImage-20220811-BZQUGI", Daniel`ARC`ApplyToImage, 
              HoldComplete[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691029], 30344207]}, 
           If[
            FailureQ[DevTools`TestingTools`Private`res], 
            Print[DevTools`TestingTools`Private`res]]], 
          ImageSize -> {57.5, 25}, Method -> "Queued"], 
         Button[
         "Update", {
           "TestUiMarker", "TestId" -> "ApplyToImage-20220811-BZQUGI"}; 
          DevTools`TestingTools`Private`updateTestClicked[
           "ApplyToImage-20220811-BZQUGI", Daniel`ARC`ApplyToImage, 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691029], "CellID" -> 30344207, 
            "SubTest" -> None], ImageSize -> {80., 25}, Method -> "Queued"], 
         Button["Open in Editor", 
          DevTools`TestingTools`Private`openInEditorClicked[
          "ApplyToImage-20220811-BZQUGI", Daniel`ARC`ApplyToImage, 
           HoldComplete[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691029], None], 
          ImageSize -> {140., 25}, Method -> "Queued"], 
         Row[{"ApplyToImage-20220811-BZQUGI"}, ImageSize -> {Full, Automatic},
           Alignment -> {Right, Center}]}}], ImageSize -> {Full, Automatic}, 
      FrameStyle -> GrayLevel[0.8], FrameMargins -> 10], 
     DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691029; If[
       And[
        ValueQ[
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691029], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691029 =!= "", 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691029 =!= Null], 
       (If[
        TrueQ[
         OptionValue[
         DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
        Framed[#, FrameStyle -> None, FrameMargins -> 2], 
        Framed[#, FrameStyle -> LightGray, Background -> White, FrameMargins -> 
         15]]& )[
        Grid[{{
           Pane[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691029, "ImageSize" -> {Full, {0, 
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {}, 
                "MaxHeight"]}}, Scrollbars -> Automatic, FrameMargins -> 0]}, 
          If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
           Apply[Sequence, {}], {
            Button[
            "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691029 = "", 
             ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
         Alignment -> {Left, Top}]], 
       Apply[Sequence, {}]]}], StandardForm],
  ImageSizeCache->{840., {21.8544921875, 27.1455078125}},
  TrackedSymbols:>{
   DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691029}]], "TestUI",
 CellMargins->{{65, 0}, {0, 0}},
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 GeneratedCell->False,
 CellChangeTimes->{
  3.869259996239889*^9},ExpressionUUID->"0b1fd6f6-11a8-4c11-b187-\
d84ed1e3ba16"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"ApplyToImage", "[", 
  RowBox[{
   RowBox[{"ARCScene", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", " ", 
        RowBox[{"-", "1"}], ",", " ", 
        RowBox[{"-", "1"}]}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"2", ",", " ", 
        RowBox[{"-", "1"}], ",", " ", 
        RowBox[{"-", "1"}]}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"2", ",", " ", "2", ",", " ", "2"}], "}"}]}], "}"}], "]"}], 
   ",", " ", "Reverse"}], "]"}]}], "Code",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellChangeTimes->{{3.8692599097068276`*^9, 3.869259949686957*^9}, {
  3.8692599811445847`*^9, 3.869259996239889*^9}},
 CellLabel->"In[660]:=",
 CellID->30344207,
 "TestId" -> 
 "ApplyToImage-20220811-BZQUGI",ExpressionUUID->"3b75995a-bd95-4c12-b415-\
632d4c226244"]
}, Open  ]],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"\"\>", "\<\"\"\>", "\<\"\"\>"}
   },
   AutoDelete->False,
   FrameStyle->{
     AbsoluteThickness[1], 
     GrayLevel[0.5]},
   GridBoxBackground->{
    "Columns" -> {{None}}, "Rows" -> {{None}}, 
     "ItemsIndexed" -> {{1, 1} -> RGBColor[1, 0, 0], {1, 2} -> 
       RGBColor[1, 0, 0], {1, 3} -> RGBColor[1, 0, 0], {2, 1} -> 
       RGBColor[1, 0, 0], {2, 2} -> GrayLevel[0.2], {2, 3} -> 
       GrayLevel[0.2], {3, 1} -> RGBColor[1, 0, 0], {3, 2} -> 
       GrayLevel[0.2], {3, 3} -> GrayLevel[0.2]}},
   GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxFrame->{"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}},
   GridBoxItemSize->{"Columns" -> {{1.3}}, "Rows" -> {{1.5}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.8692599501285987`*^9, 3.8692599911032763`*^9}},
 CellLabel->
  "Out[661]=",ExpressionUUID->"86ddbc31-1d9a-4ce1-8db1-947737cfe725"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicBox[ToBoxes[
   Column[{
     Framed[
      Grid[{{
         Button["Run", 
          
          With[{DevTools`TestingTools`Private`res = 
            DevTools`TestingTools`Private`runButtonClicked[
             "ApplyToImage-20220811-PU4JIY", Daniel`ARC`ApplyToImage, 
              HoldComplete[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691032], 47690109]}, 
           If[
            FailureQ[DevTools`TestingTools`Private`res], 
            Print[DevTools`TestingTools`Private`res]]], 
          ImageSize -> {57.5, 25}, Method -> "Queued"], 
         Button[
         "Update", {
           "TestUiMarker", "TestId" -> "ApplyToImage-20220811-PU4JIY"}; 
          DevTools`TestingTools`Private`updateTestClicked[
           "ApplyToImage-20220811-PU4JIY", Daniel`ARC`ApplyToImage, 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691032], "CellID" -> 47690109, 
            "SubTest" -> None], ImageSize -> {80., 25}, Method -> "Queued"], 
         Button["Open in Editor", 
          DevTools`TestingTools`Private`openInEditorClicked[
          "ApplyToImage-20220811-PU4JIY", Daniel`ARC`ApplyToImage, 
           HoldComplete[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691032], None], 
          ImageSize -> {140., 25}, Method -> "Queued"], 
         Row[{"ApplyToImage-20220811-PU4JIY"}, ImageSize -> {Full, Automatic},
           Alignment -> {Right, Center}]}}], ImageSize -> {Full, Automatic}, 
      FrameStyle -> GrayLevel[0.8], FrameMargins -> 10], 
     DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691032; If[
       And[
        ValueQ[
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691032], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691032 =!= "", 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691032 =!= Null], 
       (If[
        TrueQ[
         OptionValue[
         DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
        Framed[#, FrameStyle -> None, FrameMargins -> 2], 
        Framed[#, FrameStyle -> LightGray, Background -> White, FrameMargins -> 
         15]]& )[
        Grid[{{
           Pane[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691032, "ImageSize" -> {Full, {0, 
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {}, 
                "MaxHeight"]}}, Scrollbars -> Automatic, FrameMargins -> 0]}, 
          If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
           Apply[Sequence, {}], {
            Button[
            "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691032 = "", 
             ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
         Alignment -> {Left, Top}]], 
       Apply[Sequence, {}]]}], StandardForm],
  ImageSizeCache->{840., {21.8544921875, 27.1455078125}},
  TrackedSymbols:>{
   DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122263691032}]], "TestUI",
 CellMargins->{{65, 0}, {0, 0}},
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 GeneratedCell->False,
 CellChangeTimes->{
  3.8692599964249144`*^9},ExpressionUUID->"d191e8c4-2b37-46a7-9a55-\
60e4d935fa6b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"ApplyToImage", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", " ", 
       RowBox[{"-", "1"}], ",", " ", 
       RowBox[{"-", "1"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"2", ",", " ", 
       RowBox[{"-", "1"}], ",", " ", 
       RowBox[{"-", "1"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"2", ",", " ", "2", ",", " ", "2"}], "}"}]}], "}"}], ",", " ", 
   "Reverse"}], "]"}]}], "Code",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellChangeTimes->{{3.8692599097068276`*^9, 3.869259949686957*^9}, {
  3.8692599811445847`*^9, 3.8692599964249144`*^9}},
 CellLabel->"In[662]:=",
 CellID->47690109,
 "TestId" -> 
 "ApplyToImage-20220811-PU4JIY",ExpressionUUID->"65031673-9d23-45e0-ac19-\
4d01c8ee3bb1"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "1"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.869259993735773*^9},
 CellLabel->
  "Out[663]=",ExpressionUUID->"612d55fa-d21a-4908-b893-809ec5f9dcc9"]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{958, 980},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   BoxData[
    DynamicBox[
     ToBoxes[
      Column[{
        Row[{
          Button["New Test", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`NewFunctionCell[Daniel`ARC`ApplyToImage], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122243691021]], ImageSize -> {95., 40}, 
           Method -> "Queued"], " ", 
          Button["Add Tests to File", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`CreateUnitTests[
            Daniel`ARC`ApplyToImage, "SubTest" -> None], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122243691021]], ImageSize -> {162.5, 40}, 
           Method -> "Queued"], " ", 
          Button[
          "Run Tests", 
           DevTools`TestingTools`RunUnitTestsInNotebook[
            Daniel`ARC`ApplyToImage]; Null, ImageSize -> {102.5, 40}, Method -> 
           "Queued"], " ", 
          Button["Edit Tests", 
           DevTools`TestingTools`EditUnitTests[Daniel`ARC`ApplyToImage], 
           ImageSize -> {110., 40}, Method -> "Queued"], " ", 
          Button["Edit Function", 
           DevTools`SourceTools`EditFunction[Daniel`ARC`ApplyToImage], 
           ImageSize -> {132.5, 40}, Method -> "Queued"], " ", 
          Row[{
            
            DynamicModule[{
             DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
              "Capture"}, 
             Button[
              Dynamic[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel], 
              If[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel === 
               "Capture", 
               DevTools`TestingTools`FunctionCapture`EnableFunctionCapture[
                Daniel`ARC`ApplyToImage]; 
               DevTools`TestingTools`FunctionCapture`\
RegisterFunctionCaptureNotebook[Daniel`ARC`ApplyToImage, 
                 InputNotebook[]]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Release"; Null, 
               DevTools`TestingTools`FunctionCapture`DisableFunctionCapture[
                Daniel`ARC`ApplyToImage]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Capture"; Null], ImageSize -> {100, 40}, Method -> "Queued"],
              DynamicModuleValues :> {}], 
            Button["?", 
             DevTools`TestingTools`FunctionCapture`CaptureFunctionHelp[], 
             ImageSize -> {30, 40}, Method -> "Queued"]}], " ", 
          Row[{
            Button["<", 
             DevTools`NotebookTools`MoveNotebook["Left"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"], 
            Button[">", 
             DevTools`NotebookTools`MoveNotebook["Right"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"]}]}], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122243691021; If[
          And[
           ValueQ[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122243691021], 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122243691021 =!= "", 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122243691021 =!= Null], 
          (If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {"MaxHeight" -> 300},
              "NakedSection"]], 
           Framed[#, FrameStyle -> None, FrameMargins -> 2], 
           
           Framed[#, FrameStyle -> LightGray, Background -> White, 
            FrameMargins -> 15]]& )[
           Grid[{{
              Pane[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122243691021, "ImageSize" -> {Full, {0, 
                  OptionValue[
                  DevTools`NotebookTools`DynamicOutputSection, {
                   "MaxHeight" -> 300}, "MaxHeight"]}}, Scrollbars -> 
               Automatic, FrameMargins -> 0]}, 
             If[
              TrueQ[
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {
                "MaxHeight" -> 300}, "NakedSection"]], 
              Apply[Sequence, {}], {
               Button[
               "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122243691021 = "", 
                ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
            Alignment -> {Left, Top}]], 
          Apply[Sequence, {}]]}], StandardForm], 
     TrackedSymbols :> {
      DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281122243691021}]], "DockedCell"]},
TaggingRules->{
 "CreateNamedNotebook2Args" -> {
   "ApplyToImage", "Type" -> "Function", 
    "GenerateNotebookArgs" -> {"Function" -> Daniel`ARC`ApplyToImage}, 
    "ReturnNotebook" -> True}},
FrontEndVersion->"12.3 for Microsoft Windows (64-bit) (July 9, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"025e7478-df1b-4279-b811-941add207c5c"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 84, 0, 98, "Title",ExpressionUUID->"22b79c60-f518-4d8f-865f-f7692e9b9853"],
Cell[667, 24, 247, 6, 54, "Code",ExpressionUUID->"debb9c29-8592-43ed-88db-33a1e0073628",
 InitializationCell->False],
Cell[CellGroupData[{
Cell[939, 34, 79, 0, 67, "Section",ExpressionUUID->"21f953cb-8d02-49d0-8f2a-3ee2a65f7355"],
Cell[CellGroupData[{
Cell[1043, 38, 3482, 80, 52, "TestUI",ExpressionUUID->"0b1fd6f6-11a8-4c11-b187-d84ed1e3ba16",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[4528, 120, 941, 27, 54, "Code",ExpressionUUID->"3b75995a-bd95-4c12-b415-632d4c226244",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellID->30344207]
}, Open  ]],
Cell[5484, 150, 1003, 23, 95, "Output",ExpressionUUID->"86ddbc31-1d9a-4ce1-8db1-947737cfe725"],
Cell[CellGroupData[{
Cell[6512, 177, 3484, 80, 52, "TestUI",ExpressionUUID->"d191e8c4-2b37-46a7-9a55-60e4d935fa6b",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[9999, 259, 895, 26, 54, "Code",ExpressionUUID->"65031673-9d23-45e0-ac19-4d01c8ee3bb1",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellID->47690109]
}, Open  ]],
Cell[10909, 288, 469, 15, 33, "Output",ExpressionUUID->"612d55fa-d21a-4908-b893-809ec5f9dcc9"]
}, Open  ]]
}, Open  ]]
}
]
*)

