(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     11434,        294]
NotebookOptionsPosition[      5328,        146]
NotebookOutlinePosition[     10737,        280]
CellTagsIndexPosition[     10694,        277]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["ToPosition", "Title",ExpressionUUID->"332388ff-1619-44a9-b990-6970a8c4c3b5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"RunUnitTests", "[", "ToPosition", "]"}]}], "Code",
 InitializationCell->False,
 CellLabel->
  "In[1425]:=",ExpressionUUID->"617f97a9-ca10-4670-a189-6a464b813c9d"],

Cell[CellGroupData[{

Cell["Tests", "Section",ExpressionUUID->"c602ad64-b41c-4b04-9b90-422f8f1e11bc"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicBox[ToBoxes[
   Column[{
     Framed[
      Grid[{{
         Button["Run", 
          
          With[{DevTools`TestingTools`Private`res = 
            DevTools`TestingTools`Private`runButtonClicked[
             "ToPosition-20220807-9VPF3B", Daniel`ARC`ToPosition, 
              HoldComplete[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287196161066591], 73577193]}, 
           If[
            FailureQ[DevTools`TestingTools`Private`res], 
            Print[DevTools`TestingTools`Private`res]]], 
          ImageSize -> {57.5, 25}, Method -> "Queued"], 
         Button[
         "Update", {"TestUiMarker", "TestId" -> "ToPosition-20220807-9VPF3B"}; 
          DevTools`TestingTools`Private`updateTestClicked[
           "ToPosition-20220807-9VPF3B", Daniel`ARC`ToPosition, 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287196161066591], "CellID" -> 73577193, 
            "SubTest" -> None], ImageSize -> {80., 25}, Method -> "Queued"], 
         Button["Open in Editor", 
          DevTools`TestingTools`Private`openInEditorClicked[
          "ToPosition-20220807-9VPF3B", Daniel`ARC`ToPosition, 
           HoldComplete[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287196161066591], None], 
          ImageSize -> {140., 25}, Method -> "Queued"], 
         Row[{"ToPosition-20220807-9VPF3B"}, ImageSize -> {Full, Automatic}, 
          Alignment -> {Right, Center}]}}], ImageSize -> {Full, Automatic}, 
      FrameStyle -> GrayLevel[0.8], FrameMargins -> 10], 
     DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287196161066591; If[
       And[
        ValueQ[
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287196161066591], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287196161066591 =!= "", 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287196161066591 =!= Null], 
       (If[
        TrueQ[
         OptionValue[
         DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
        Framed[#, FrameStyle -> None, FrameMargins -> 2], 
        Framed[#, FrameStyle -> LightGray, Background -> White, FrameMargins -> 
         15]]& )[
        Grid[{{
           Pane[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287196161066591, "ImageSize" -> {Full, {0, 
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {}, 
                "MaxHeight"]}}, Scrollbars -> Automatic, FrameMargins -> 0]}, 
          If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
           Apply[Sequence, {}], {
            Button[
            "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287196161066591 = "", 
             ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
         Alignment -> {Left, Top}]], 
       Apply[Sequence, {}]]}], StandardForm],
  ImageSizeCache->{840., {21.8544921875, 27.1455078125}},
  TrackedSymbols:>{
   DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287196161066591}]], "TestUI",
 CellMargins->{{65, 0}, {0, 0}},
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 GeneratedCell->False,
 CellChangeTimes->{
  3.868902376134162*^9},ExpressionUUID->"92195300-97a0-4123-9dc4-\
6736fce58b3a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"ToPosition", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<Y\>\"", " ", "->", " ", "1"}], ",", " ", 
    RowBox[{"\"\<X\>\"", " ", "->", " ", "2"}]}], "|>"}], "]"}]}], "Code",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellChangeTimes->{{3.868902363234968*^9, 3.868902376134162*^9}},
 CellLabel->"In[1423]:=",
 CellID->73577193,
 "TestId" -> 
 "ToPosition-20220807-9VPF3B",ExpressionUUID->"f3ab3c3a-7d89-47fb-80ba-\
0445aebff5aa"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{{3.8689023683106413`*^9, 3.8689023749023876`*^9}},
 CellLabel->
  "Out[1424]=",ExpressionUUID->"ca3d28bd-c3c6-4a08-9a03-70ff7d64a25b"]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{958, 980},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   BoxData[
    DynamicBox[
     ToBoxes[
      Column[{
        Row[{
          Button["New Test", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`NewFunctionCell[Daniel`ARC`ToPosition], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287193181066582]], ImageSize -> {95., 40}, 
           Method -> "Queued"], " ", 
          Button["Add Tests to File", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`CreateUnitTests[
            Daniel`ARC`ToPosition, "SubTest" -> None], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287193181066582]], ImageSize -> {162.5, 40}, 
           Method -> "Queued"], " ", 
          Button[
          "Run Tests", 
           DevTools`TestingTools`RunUnitTestsInNotebook[
            Daniel`ARC`ToPosition]; Null, ImageSize -> {102.5, 40}, Method -> 
           "Queued"], " ", 
          Button["Edit Tests", 
           DevTools`TestingTools`EditUnitTests[Daniel`ARC`ToPosition], 
           ImageSize -> {110., 40}, Method -> "Queued"], " ", 
          Button["Edit Function", 
           DevTools`SourceTools`EditFunction[Daniel`ARC`ToPosition], 
           ImageSize -> {132.5, 40}, Method -> "Queued"], " ", 
          Row[{
            
            DynamicModule[{
             DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
              "Capture"}, 
             Button[
              Dynamic[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel], 
              If[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel === 
               "Capture", 
               DevTools`TestingTools`FunctionCapture`EnableFunctionCapture[
                Daniel`ARC`ToPosition]; 
               DevTools`TestingTools`FunctionCapture`\
RegisterFunctionCaptureNotebook[Daniel`ARC`ToPosition, 
                 InputNotebook[]]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Release"; Null, 
               DevTools`TestingTools`FunctionCapture`DisableFunctionCapture[
                Daniel`ARC`ToPosition]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Capture"; Null], ImageSize -> {100, 40}, Method -> "Queued"],
              DynamicModuleValues :> {}], 
            Button["?", 
             DevTools`TestingTools`FunctionCapture`CaptureFunctionHelp[], 
             ImageSize -> {30, 40}, Method -> "Queued"]}], " ", 
          Row[{
            Button["<", 
             DevTools`NotebookTools`MoveNotebook["Left"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"], 
            Button[">", 
             DevTools`NotebookTools`MoveNotebook["Right"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"]}]}], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287193181066582; If[
          And[
           ValueQ[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287193181066582], 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287193181066582 =!= "", 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287193181066582 =!= Null], 
          (If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {"MaxHeight" -> 300},
              "NakedSection"]], 
           Framed[#, FrameStyle -> None, FrameMargins -> 2], 
           
           Framed[#, FrameStyle -> LightGray, Background -> White, 
            FrameMargins -> 15]]& )[
           Grid[{{
              Pane[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287193181066582, "ImageSize" -> {Full, {0, 
                  OptionValue[
                  DevTools`NotebookTools`DynamicOutputSection, {
                   "MaxHeight" -> 300}, "MaxHeight"]}}, Scrollbars -> 
               Automatic, FrameMargins -> 0]}, 
             If[
              TrueQ[
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {
                "MaxHeight" -> 300}, "NakedSection"]], 
              Apply[Sequence, {}], {
               Button[
               "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287193181066582 = "", 
                ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
            Alignment -> {Left, Top}]], 
          Apply[Sequence, {}]]}], StandardForm], 
     TrackedSymbols :> {
      DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202287193181066582}]], "DockedCell"]},
TaggingRules->{
 "CreateNamedNotebook2Args" -> {
   "ToPosition", "Type" -> "Function", 
    "GenerateNotebookArgs" -> {"Function" -> Daniel`ARC`ToPosition}, 
    "ReturnNotebook" -> True}},
FrontEndVersion->"12.3 for Microsoft Windows (64-bit) (July 9, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"19248fd3-7b80-42fd-a846-b83e825fe032"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 82, 0, 98, "Title",ExpressionUUID->"332388ff-1619-44a9-b990-6970a8c4c3b5"],
Cell[665, 24, 246, 6, 54, "Code",ExpressionUUID->"617f97a9-ca10-4670-a189-6a464b813c9d",
 InitializationCell->False],
Cell[CellGroupData[{
Cell[936, 34, 79, 0, 67, "Section",ExpressionUUID->"c602ad64-b41c-4b04-9b90-422f8f1e11bc"],
Cell[CellGroupData[{
Cell[1040, 38, 3454, 79, 52, "TestUI",ExpressionUUID->"92195300-97a0-4123-9dc4-6736fce58b3a",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[4497, 119, 561, 15, 54, "Code",ExpressionUUID->"f3ab3c3a-7d89-47fb-80ba-0445aebff5aa",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellID->73577193]
}, Open  ]],
Cell[5073, 137, 227, 5, 33, "Output",ExpressionUUID->"ca3d28bd-c3c6-4a08-9a03-70ff7d64a25b"]
}, Open  ]]
}, Open  ]]
}
]
*)

