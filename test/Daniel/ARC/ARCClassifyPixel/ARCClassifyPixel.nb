(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     11558,        296]
NotebookOptionsPosition[      5328,        146]
NotebookOutlinePosition[     10861,        282]
CellTagsIndexPosition[     10818,        279]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["ARCClassifyPixel", "Title",ExpressionUUID->"e6ec58e1-da05-4c3d-9a31-6dfb5be81def"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"RunUnitTests", "[", "ARCClassifyPixel", "]"}]}], "Code",
 InitializationCell->False,
 CellLabel->
  "In[479]:=",ExpressionUUID->"4cd2ffc9-f138-484c-8211-bf5f91ee2049"],

Cell[CellGroupData[{

Cell["Tests", "Section",ExpressionUUID->"74b0398e-89bc-43b9-9964-356141373146"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicBox[ToBoxes[
   Column[{
     Framed[
      Grid[{{
         Button["Run", 
          
          With[{DevTools`TestingTools`Private`res = 
            DevTools`TestingTools`Private`runButtonClicked[
             "ARCClassifyPixel-20220717-6307RD", Daniel`ARC`ARCClassifyPixel, 
              HoldComplete[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171444162114], 39115232]}, 
           If[
            FailureQ[DevTools`TestingTools`Private`res], 
            Print[DevTools`TestingTools`Private`res]]], 
          ImageSize -> {57.5, 25}, Method -> "Queued"], 
         Button[
         "Update", {
           "TestUiMarker", "TestId" -> "ARCClassifyPixel-20220717-6307RD"}; 
          DevTools`TestingTools`Private`updateTestClicked[
           "ARCClassifyPixel-20220717-6307RD", Daniel`ARC`ARCClassifyPixel, 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171444162114], "CellID" -> 39115232, 
            "SubTest" -> None], ImageSize -> {80., 25}, Method -> "Queued"], 
         Button["Open in Editor", 
          DevTools`TestingTools`Private`openInEditorClicked[
          "ARCClassifyPixel-20220717-6307RD", Daniel`ARC`ARCClassifyPixel, 
           HoldComplete[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171444162114], None], 
          ImageSize -> {140., 25}, Method -> "Queued"], 
         Row[{"ARCClassifyPixel-20220717-6307RD"}, 
          ImageSize -> {Full, Automatic}, Alignment -> {Right, Center}]}}], 
      ImageSize -> {Full, Automatic}, FrameStyle -> GrayLevel[0.8], 
      FrameMargins -> 10], 
     DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171444162114; If[
       And[
        ValueQ[
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171444162114], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171444162114 =!= "", 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171444162114 =!= Null], 
       (If[
        TrueQ[
         OptionValue[
         DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
        Framed[#, FrameStyle -> None, FrameMargins -> 2], 
        Framed[#, FrameStyle -> LightGray, Background -> White, FrameMargins -> 
         15]]& )[
        Grid[{{
           Pane[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171444162114, "ImageSize" -> {Full, {0, 
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {}, 
                "MaxHeight"]}}, Scrollbars -> Automatic, FrameMargins -> 0]}, 
          If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
           Apply[Sequence, {}], {
            Button[
            "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171444162114 = "", 
             ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
         Alignment -> {Left, Top}]], 
       Apply[Sequence, {}]]}], StandardForm],
  ImageSizeCache->{840., {21., 27.}},
  TrackedSymbols:>{
   DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171444162114}]], "TestUI",
 CellMargins->{{65, 0}, {0, 0}},
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 GeneratedCell->False,
 CellChangeTimes->{
  3.86707225630157*^9},ExpressionUUID->"9f21b5fc-7e5d-4521-8af7-3a82b3957d3a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"ARCClassifyPixel", "[", 
  RowBox[{"{", 
   RowBox[{"{", "1", "}"}], "}"}], "]"}]}], "Code",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellChangeTimes->{{3.8670722522245646`*^9, 3.86707225630157*^9}},
 CellLabel->"In[477]:=",
 CellID->39115232,
 "TestId" -> 
 "ARCClassifyPixel-20220717-6307RD",ExpressionUUID->"4afb1d8c-f109-4b6d-95ec-\
56bed13cd130"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"Pixel\"\>"}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.867072254518268*^9},
 CellLabel->
  "Out[478]=",ExpressionUUID->"e8318eec-dee5-4315-9827-83f31e18280f"]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{958, 980},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   BoxData[
    DynamicBox[
     ToBoxes[
      Column[{
        Row[{
          Button["New Test", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`NewFunctionCell[
            Daniel`ARC`ARCClassifyPixel], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171443282107]], ImageSize -> {95., 40}, 
           Method -> "Queued"], " ", 
          Button["Add Tests to File", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`CreateUnitTests[
            Daniel`ARC`ARCClassifyPixel, "SubTest" -> None], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171443282107]], ImageSize -> {162.5, 40}, 
           Method -> "Queued"], " ", 
          Button[
          "Run Tests", 
           DevTools`TestingTools`RunUnitTestsInNotebook[
            Daniel`ARC`ARCClassifyPixel]; Null, ImageSize -> {102.5, 40}, 
           Method -> "Queued"], " ", 
          Button["Edit Tests", 
           DevTools`TestingTools`EditUnitTests[Daniel`ARC`ARCClassifyPixel], 
           ImageSize -> {110., 40}, Method -> "Queued"], " ", 
          Button["Edit Function", 
           DevTools`SourceTools`EditFunction[Daniel`ARC`ARCClassifyPixel], 
           ImageSize -> {132.5, 40}, Method -> "Queued"], " ", 
          Row[{
            
            DynamicModule[{
             DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
              "Capture"}, 
             Button[
              Dynamic[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel], 
              If[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel === 
               "Capture", 
               DevTools`TestingTools`FunctionCapture`EnableFunctionCapture[
                Daniel`ARC`ARCClassifyPixel]; 
               DevTools`TestingTools`FunctionCapture`\
RegisterFunctionCaptureNotebook[Daniel`ARC`ARCClassifyPixel, 
                 InputNotebook[]]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Release"; Null, 
               DevTools`TestingTools`FunctionCapture`DisableFunctionCapture[
                Daniel`ARC`ARCClassifyPixel]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Capture"; Null], ImageSize -> {100, 40}, Method -> "Queued"],
              DynamicModuleValues :> {}], 
            Button["?", 
             DevTools`TestingTools`FunctionCapture`CaptureFunctionHelp[], 
             ImageSize -> {30, 40}, Method -> "Queued"]}], " ", 
          Row[{
            Button["<", 
             DevTools`NotebookTools`MoveNotebook["Left"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"], 
            Button[">", 
             DevTools`NotebookTools`MoveNotebook["Right"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"]}]}], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171443282107; If[
          And[
           ValueQ[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171443282107], 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171443282107 =!= "", 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171443282107 =!= Null], 
          (If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {"MaxHeight" -> 300},
              "NakedSection"]], 
           Framed[#, FrameStyle -> None, FrameMargins -> 2], 
           
           Framed[#, FrameStyle -> LightGray, Background -> White, 
            FrameMargins -> 15]]& )[
           Grid[{{
              Pane[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171443282107, "ImageSize" -> {Full, {0, 
                  OptionValue[
                  DevTools`NotebookTools`DynamicOutputSection, {
                   "MaxHeight" -> 300}, "MaxHeight"]}}, Scrollbars -> 
               Automatic, FrameMargins -> 0]}, 
             If[
              TrueQ[
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {
                "MaxHeight" -> 300}, "NakedSection"]], 
              Apply[Sequence, {}], {
               Button[
               "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171443282107 = "", 
                ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
            Alignment -> {Left, Top}]], 
          Apply[Sequence, {}]]}], StandardForm], 
     TrackedSymbols :> {
      DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20227171443282107}]], "DockedCell"]},
TaggingRules->{
 "WelcomeScreenSettings" -> {"FEStarting" -> False}, 
  "CreateNamedNotebook2Args" -> {
   "ARCClassifyPixel", "Type" -> "Function", 
    "GenerateNotebookArgs" -> {"Function" -> Daniel`ARC`ARCClassifyPixel}, 
    "ReturnNotebook" -> True}},
FrontEndVersion->"12.2 for Microsoft Windows (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"8a8ecf1f-09f1-45ee-bf3f-7cbf6a0e0359"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 88, 0, 96, "Title",ExpressionUUID->"e6ec58e1-da05-4c3d-9a31-6dfb5be81def"],
Cell[671, 24, 251, 6, 53, "Code",ExpressionUUID->"4cd2ffc9-f138-484c-8211-bf5f91ee2049",
 InitializationCell->False],
Cell[CellGroupData[{
Cell[947, 34, 79, 0, 67, "Section",ExpressionUUID->"74b0398e-89bc-43b9-9964-356141373146"],
Cell[CellGroupData[{
Cell[1051, 38, 3488, 80, 50, "TestUI",ExpressionUUID->"9f21b5fc-7e5d-4521-8af7-3a82b3957d3a",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[4542, 120, 478, 13, 53, "Code",ExpressionUUID->"4afb1d8c-f109-4b6d-95ec-56bed13cd130",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellID->39115232]
}, Open  ]],
Cell[5035, 136, 265, 6, 32, "Output",ExpressionUUID->"e8318eec-dee5-4315-9827-83f31e18280f"]
}, Open  ]]
}, Open  ]]
}
]
*)

