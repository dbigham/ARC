(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     12756,        320]
NotebookOptionsPosition[      6154,        163]
NotebookOutlinePosition[     11928,        303]
CellTagsIndexPosition[     11885,        300]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["ARCCheckForSceneRepairUsingImputationQ", "Title",ExpressionUUID->"9ff2cb78-7bcf-4e06-b014-90c687073e07"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"RunUnitTests", "[", "ARCCheckForSceneRepairUsingImputationQ", 
  "]"}]}], "Code",
 InitializationCell->False,
 CellLabel->
  "In[433]:=",ExpressionUUID->"9fe2025e-f4ea-402e-a73b-fdc57e1e150b"],

Cell[CellGroupData[{

Cell["Tests", "Section",ExpressionUUID->"509664c0-4401-4a1b-9798-05ff17833784"],

Cell[CellGroupData[{

Cell["Non-centered Imputation via Symmetry, Lots of Black", "Subsection",
 CellChangeTimes->{{3.8737146019568424`*^9, 
  3.8737146130813828`*^9}},ExpressionUUID->"ab3d41d3-ae6c-40e2-a80c-\
41e2f7cb0c12"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicBox[ToBoxes[
   Column[{
     Framed[
      Grid[{{
         Button["Run", 
          
          With[{DevTools`TestingTools`Private`res = 
            DevTools`TestingTools`Private`runButtonClicked[
             "ARCCheckForSceneRepairUsingImputationQ-20221002-ALYPRL", 
              Daniel`ARC`ARCCheckForSceneRepairUsingImputationQ, 
              HoldComplete[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021150198942], 72745466, "SubTest" -> None]}, 
           If[
            FailureQ[DevTools`TestingTools`Private`res], 
            Print[DevTools`TestingTools`Private`res]]], 
          ImageSize -> {57.5, 25}, Method -> "Queued"], 
         Button[
         "Update", {
           "TestUiMarker", "TestId" -> 
            "ARCCheckForSceneRepairUsingImputationQ-20221002-ALYPRL"}; 
          DevTools`TestingTools`Private`updateTestClicked[
           "ARCCheckForSceneRepairUsingImputationQ-20221002-ALYPRL", 
            Daniel`ARC`ARCCheckForSceneRepairUsingImputationQ, 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021150198942], "CellID" -> 72745466, 
            "SubTest" -> None], ImageSize -> {80., 25}, Method -> "Queued"], 
         Button["Open in Editor", 
          DevTools`TestingTools`Private`openInEditorClicked[
          "ARCCheckForSceneRepairUsingImputationQ-20221002-ALYPRL", 
           Daniel`ARC`ARCCheckForSceneRepairUsingImputationQ, 
           HoldComplete[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021150198942], 
           Utility`FilterOptions[
           "SubTest" -> None, 
            DevTools`TestingTools`Private`openInEditorClicked]], 
          ImageSize -> {140., 25}, Method -> "Queued"], 
         Row[{"ARCCheckForSceneRepairUsingImputationQ-20221002-ALYPRL"}, 
          ImageSize -> {Full, Automatic}, Alignment -> {Right, Center}]}}], 
      ImageSize -> {Full, Automatic}, FrameStyle -> GrayLevel[0.8], 
      FrameMargins -> 10], 
     DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021150198942; If[
       And[
        ValueQ[
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021150198942], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021150198942 =!= "", 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021150198942 =!= Null], 
       (If[
        TrueQ[
         OptionValue[
         DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
        Framed[#, FrameStyle -> None, FrameMargins -> 2], 
        Framed[#, FrameStyle -> LightGray, Background -> White, FrameMargins -> 
         15]]& )[
        Grid[{{
           Pane[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021150198942, "ImageSize" -> {Full, {0, 
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {}, 
                "MaxHeight"]}}, Scrollbars -> Automatic, FrameMargins -> 0]}, 
          If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
           Apply[Sequence, {}], {
            Button[
            "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021150198942 = "", 
             ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
         Alignment -> {Left, Top}]], 
       Apply[Sequence, {}]]}], StandardForm],
  ImageSizeCache->{833., {21.8544921875, 27.1455078125}},
  TrackedSymbols:>{
   DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021150198942}]], "TestUI",
 CellMargins->{{65, 0}, {0, 0}},
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 GeneratedCell->False,
 CellChangeTimes->{
  3.8737146187734327`*^9},ExpressionUUID->"9300db3d-feea-4b81-b34c-\
ebca1631070a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"ARCCheckForSceneRepairUsingImputationQ", "[", 
  RowBox[{
   RowBox[{"ARCParseFile", "[", "\"\<3631a71a\>\"", "]"}], "[", 
   "\"\<Train\>\"", "]"}], "]"}]}], "Code",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellChangeTimes->{3.873714274968506*^9, 3.8737146187734327`*^9},
 CellLabel->"In[431]:=",
 CellID->72745466,
 "TestId" -> 
 "ARCCheckForSceneRepairUsingImputationQ-20221002-ALYPRL",ExpressionUUID->\
"643d9614-4a1d-4e0c-9a1d-913c145dcd1d"]
}, Open  ]],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.8737142792890425`*^9, 3.8737142909572124`*^9}, 
   3.873714340428238*^9, {3.873714374869377*^9, 3.8737144736673527`*^9}, {
   3.8737145119904947`*^9, 3.8737146170191383`*^9}},
 CellLabel->
  "Out[432]=",ExpressionUUID->"d6fdc991-d1e6-4f6b-bed5-2902216eaabd"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{958, 980},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   BoxData[
    DynamicBox[
     ToBoxes[
      Column[{
        Row[{
          Button["New Test", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`NewFunctionCell[
            Daniel`ARC`ARCCheckForSceneRepairUsingImputationQ], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021141288914]], ImageSize -> {95., 40}, 
           Method -> "Queued"], " ", 
          Button["Add Tests to File", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`CreateUnitTests[
            Daniel`ARC`ARCCheckForSceneRepairUsingImputationQ, "SubTest" -> 
             None], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021141288914]], ImageSize -> {162.5, 40}, 
           Method -> "Queued"], " ", 
          Button[
          "Run Tests", 
           DevTools`TestingTools`RunUnitTestsInNotebook[
            Daniel`ARC`ARCCheckForSceneRepairUsingImputationQ]; Null, 
           ImageSize -> {102.5, 40}, Method -> "Queued"], " ", 
          Button["Edit Tests", 
           DevTools`TestingTools`EditUnitTests[
           Daniel`ARC`ARCCheckForSceneRepairUsingImputationQ, "SubTest" -> 
            None], ImageSize -> {110., 40}, Method -> "Queued"], " ", 
          Button["Edit Function", 
           DevTools`SourceTools`EditFunction[
           Daniel`ARC`ARCCheckForSceneRepairUsingImputationQ], 
           ImageSize -> {132.5, 40}, Method -> "Queued"], " ", 
          Row[{
            
            DynamicModule[{
             DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
              "Capture"}, 
             Button[
              Dynamic[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel], 
              If[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel === 
               "Capture", 
               DevTools`TestingTools`FunctionCapture`EnableFunctionCapture[
                Daniel`ARC`ARCCheckForSceneRepairUsingImputationQ]; 
               DevTools`TestingTools`FunctionCapture`\
RegisterFunctionCaptureNotebook[
                Daniel`ARC`ARCCheckForSceneRepairUsingImputationQ, 
                 InputNotebook[]]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Release"; Null, 
               DevTools`TestingTools`FunctionCapture`DisableFunctionCapture[
                Daniel`ARC`ARCCheckForSceneRepairUsingImputationQ]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Capture"; Null], ImageSize -> {100, 40}, Method -> "Queued"],
              DynamicModuleValues :> {}], 
            Button["?", 
             DevTools`TestingTools`FunctionCapture`CaptureFunctionHelp[], 
             ImageSize -> {30, 40}, Method -> "Queued"]}], " ", 
          Row[{
            Button["<", 
             DevTools`NotebookTools`MoveNotebook["Left"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"], 
            Button[">", 
             DevTools`NotebookTools`MoveNotebook["Right"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"]}]}], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021141288914; If[
          And[
           ValueQ[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021141288914], 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021141288914 =!= "", 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021141288914 =!= Null], 
          (If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {"MaxHeight" -> 300},
              "NakedSection"]], 
           Framed[#, FrameStyle -> None, FrameMargins -> 2], 
           
           Framed[#, FrameStyle -> LightGray, Background -> White, 
            FrameMargins -> 15]]& )[
           Grid[{{
              Pane[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021141288914, "ImageSize" -> {Full, {0, 
                  OptionValue[
                  DevTools`NotebookTools`DynamicOutputSection, {
                   "MaxHeight" -> 300}, "MaxHeight"]}}, Scrollbars -> 
               Automatic, FrameMargins -> 0]}, 
             If[
              TrueQ[
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {
                "MaxHeight" -> 300}, "NakedSection"]], 
              Apply[Sequence, {}], {
               Button[
               "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021141288914 = "", 
                ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
            Alignment -> {Left, Top}]], 
          Apply[Sequence, {}]]}], StandardForm], 
     TrackedSymbols :> {
      DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable20221021141288914}]], "DockedCell"]},
TaggingRules->{
 "CreateNamedNotebook2Args" -> {
   "ARCCheckForSceneRepairUsingImputationQ", "Type" -> "Function", 
    "GenerateNotebookArgs" -> {
     "Function" -> Daniel`ARC`ARCCheckForSceneRepairUsingImputationQ}, 
    "ReturnNotebook" -> True}},
FrontEndVersion->"12.3 for Microsoft Windows (64-bit) (July 9, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"cdc5ba81-81c1-496e-a198-57acb03ad516"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 110, 0, 98, "Title",ExpressionUUID->"9ff2cb78-7bcf-4e06-b014-90c687073e07"],
Cell[693, 24, 276, 7, 54, "Code",ExpressionUUID->"9fe2025e-f4ea-402e-a73b-fdc57e1e150b",
 InitializationCell->False],
Cell[CellGroupData[{
Cell[994, 35, 79, 0, 67, "Section",ExpressionUUID->"509664c0-4401-4a1b-9798-05ff17833784"],
Cell[CellGroupData[{
Cell[1098, 39, 203, 3, 54, "Subsection",ExpressionUUID->"ab3d41d3-ae6c-40e2-a80c-41e2f7cb0c12"],
Cell[CellGroupData[{
Cell[1326, 46, 3885, 88, 52, "TestUI",ExpressionUUID->"9300db3d-feea-4b81-b34c-ebca1631070a",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[5214, 136, 573, 14, 54, "Code",ExpressionUUID->"643d9614-4a1d-4e0c-9a1d-913c145dcd1d",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellID->72745466]
}, Open  ]],
Cell[5802, 153, 312, 5, 33, "Output",ExpressionUUID->"d6fdc991-d1e6-4f6b-bed5-2902216eaabd"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

