(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     12146,        311]
NotebookOptionsPosition[      5860,        158]
NotebookOutlinePosition[     11448,        297]
CellTagsIndexPosition[     11405,        294]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["ARCCombineAlternatives", "Title",ExpressionUUID->"3456ac2a-4360-46de-8958-403538c6de1f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"RunUnitTests", "[", "ARCCombineAlternatives", "]"}]}], "Code",
 InitializationCell->False,
 CellLabel->
  "In[844]:=",ExpressionUUID->"af40aa88-70ac-4d8f-bfd6-90d2aca587e5"],

Cell[CellGroupData[{

Cell["Tests", "Section",ExpressionUUID->"fcbb840d-c239-4ef4-aa83-ec1632393dde"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicBox[ToBoxes[
   Column[{
     Framed[
      Grid[{{
         Button["Run", 
          
          With[{DevTools`TestingTools`Private`res = 
            DevTools`TestingTools`Private`runButtonClicked[
             "ARCCombineAlternatives-20220819-T7ZENE", 
              Daniel`ARC`ARCCombineAlternatives, 
              HoldComplete[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915572679085], 32205768]}, 
           If[
            FailureQ[DevTools`TestingTools`Private`res], 
            Print[DevTools`TestingTools`Private`res]]], 
          ImageSize -> {57.5, 25}, Method -> "Queued"], 
         Button[
         "Update", {
           "TestUiMarker", "TestId" -> 
            "ARCCombineAlternatives-20220819-T7ZENE"}; 
          DevTools`TestingTools`Private`updateTestClicked[
           "ARCCombineAlternatives-20220819-T7ZENE", 
            Daniel`ARC`ARCCombineAlternatives, 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915572679085], "CellID" -> 32205768, 
            "SubTest" -> None], ImageSize -> {80., 25}, Method -> "Queued"], 
         Button["Open in Editor", 
          DevTools`TestingTools`Private`openInEditorClicked[
          "ARCCombineAlternatives-20220819-T7ZENE", 
           Daniel`ARC`ARCCombineAlternatives, 
           HoldComplete[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915572679085], None], 
          ImageSize -> {140., 25}, Method -> "Queued"], 
         Row[{"ARCCombineAlternatives-20220819-T7ZENE"}, 
          ImageSize -> {Full, Automatic}, Alignment -> {Right, Center}]}}], 
      ImageSize -> {Full, Automatic}, FrameStyle -> GrayLevel[0.8], 
      FrameMargins -> 10], 
     DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915572679085; If[
       And[
        ValueQ[
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915572679085], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915572679085 =!= "", 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915572679085 =!= Null], 
       (If[
        TrueQ[
         OptionValue[
         DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
        Framed[#, FrameStyle -> None, FrameMargins -> 2], 
        Framed[#, FrameStyle -> LightGray, Background -> White, FrameMargins -> 
         15]]& )[
        Grid[{{
           Pane[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915572679085, "ImageSize" -> {Full, {0, 
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {}, 
                "MaxHeight"]}}, Scrollbars -> Automatic, FrameMargins -> 0]}, 
          If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {}, "NakedSection"]], 
           Apply[Sequence, {}], {
            Button[
            "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915572679085 = "", 
             ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
         Alignment -> {Left, Top}]], 
       Apply[Sequence, {}]]}], StandardForm],
  ImageSizeCache->{840., {21.8544921875, 27.1455078125}},
  TrackedSymbols:>{
   DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915572679085}]], "TestUI",
 CellMargins->{{65, 0}, {0, 0}},
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 GeneratedCell->False,
 CellChangeTimes->{
  3.869927846461346*^9},ExpressionUUID->"6e178bf4-0b3e-4737-9503-\
3e57a4b6391a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReloadARC", "[", "]"}], ";"}], "\n", 
 RowBox[{"ARCCombineAlternatives", "[", "\n", "\t", 
  RowBox[{"Alternatives", "[", "\n", "\t\t", 
   RowBox[{"1", ",", "\n", "\t\t", 
    RowBox[{"1", " ", "|", " ", "2"}], ",", "\n", "\t\t", "2", ",", "\n", 
    "\t\t", "3", ",", "\n", "\t\t", 
    RowBox[{"{", 
     RowBox[{"9", ",", " ", "9"}], "}"}]}], "\n", "\t", "]"}], "\n", 
  "]"}]}], "Code",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellChangeTimes->{{3.869927608172084*^9, 3.869927617929834*^9}, {
   3.869927677974744*^9, 3.8699277267541375`*^9}, 3.869927846461346*^9},
 CellLabel->"In[842]:=",
 CellID->32205768,
 "TestId" -> 
 "ARCCombineAlternatives-20220819-T7ZENE",ExpressionUUID->"a02d229c-67ad-4fcd-\
b2f1-245b63a059bd"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"1", "|", "2", "|", "3", "|", 
  RowBox[{"{", 
   RowBox[{"9", ",", "9"}], "}"}]}]], "Output",
 CellChangeTimes->{{3.8699276744097447`*^9, 3.8699277457697067`*^9}, {
  3.8699277776603093`*^9, 3.869927840854494*^9}},
 CellLabel->
  "Out[843]=",ExpressionUUID->"c6422437-5815-45a1-b1dc-47039ff79c5d"]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{958, 980},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   BoxData[
    DynamicBox[
     ToBoxes[
      Column[{
        Row[{
          Button["New Test", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`NewFunctionCell[
            Daniel`ARC`ARCCombineAlternatives], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915532279065]], ImageSize -> {95., 40}, 
           Method -> "Queued"], " ", 
          Button["Add Tests to File", 
           
           DevTools`NotebookTools`\
RedirectPrintsAndMessagesToDynamicOutputSection[
            DevTools`TestingTools`CreateUnitTests[
            Daniel`ARC`ARCCombineAlternatives, "SubTest" -> None], 
            HoldComplete[
            DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915532279065]], ImageSize -> {162.5, 40}, 
           Method -> "Queued"], " ", 
          Button[
          "Run Tests", 
           DevTools`TestingTools`RunUnitTestsInNotebook[
            Daniel`ARC`ARCCombineAlternatives]; Null, 
           ImageSize -> {102.5, 40}, Method -> "Queued"], " ", 
          Button["Edit Tests", 
           DevTools`TestingTools`EditUnitTests[
           Daniel`ARC`ARCCombineAlternatives], ImageSize -> {110., 40}, 
           Method -> "Queued"], " ", 
          Button["Edit Function", 
           DevTools`SourceTools`EditFunction[
           Daniel`ARC`ARCCombineAlternatives], ImageSize -> {132.5, 40}, 
           Method -> "Queued"], " ", 
          Row[{
            
            DynamicModule[{
             DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
              "Capture"}, 
             Button[
              Dynamic[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel], 
              If[
              DevTools`TestingTools`FunctionCapture`Private`buttonLabel === 
               "Capture", 
               DevTools`TestingTools`FunctionCapture`EnableFunctionCapture[
                Daniel`ARC`ARCCombineAlternatives]; 
               
               DevTools`TestingTools`FunctionCapture`\
RegisterFunctionCaptureNotebook[Daniel`ARC`ARCCombineAlternatives, 
                 InputNotebook[]]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Release"; Null, 
               DevTools`TestingTools`FunctionCapture`DisableFunctionCapture[
                Daniel`ARC`ARCCombineAlternatives]; 
               DevTools`TestingTools`FunctionCapture`Private`buttonLabel = 
                "Capture"; Null], ImageSize -> {100, 40}, Method -> "Queued"],
              DynamicModuleValues :> {}], 
            Button["?", 
             DevTools`TestingTools`FunctionCapture`CaptureFunctionHelp[], 
             ImageSize -> {30, 40}, Method -> "Queued"]}], " ", 
          Row[{
            Button["<", 
             DevTools`NotebookTools`MoveNotebook["Left"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"], 
            Button[">", 
             DevTools`NotebookTools`MoveNotebook["Right"], 
             ImageSize -> {42.5, 40}, Method -> "Queued"]}]}], 
        DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915532279065; If[
          And[
           ValueQ[
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915532279065], 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915532279065 =!= "", 
           DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915532279065 =!= Null], 
          (If[
           TrueQ[
            OptionValue[
            DevTools`NotebookTools`DynamicOutputSection, {"MaxHeight" -> 300},
              "NakedSection"]], 
           Framed[#, FrameStyle -> None, FrameMargins -> 2], 
           
           Framed[#, FrameStyle -> LightGray, Background -> White, 
            FrameMargins -> 15]]& )[
           Grid[{{
              Pane[
              DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915532279065, "ImageSize" -> {Full, {0, 
                  OptionValue[
                  DevTools`NotebookTools`DynamicOutputSection, {
                   "MaxHeight" -> 300}, "MaxHeight"]}}, Scrollbars -> 
               Automatic, FrameMargins -> 0]}, 
             If[
              TrueQ[
               OptionValue[
               DevTools`NotebookTools`DynamicOutputSection, {
                "MaxHeight" -> 300}, "NakedSection"]], 
              Apply[Sequence, {}], {
               Button[
               "OK", DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915532279065 = "", 
                ImageSize -> {100, 33}]}]}, Spacings -> {0, 1}, 
            Alignment -> {Left, Top}]], 
          Apply[Sequence, {}]]}], StandardForm], 
     TrackedSymbols :> {
      DevTools`NotebookTools`Private`\
DynamicOutputSectionVariable202281915532279065}]], "DockedCell"]},
TaggingRules->{
 "CreateNamedNotebook2Args" -> {
   "ARCCombineAlternatives", "Type" -> "Function", 
    "GenerateNotebookArgs" -> {
     "Function" -> Daniel`ARC`ARCCombineAlternatives}, "ReturnNotebook" -> 
    True}},
FrontEndVersion->"12.3 for Microsoft Windows (64-bit) (July 9, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"e0dab650-64dd-4bc9-b94b-79f1ad112df8"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 94, 0, 98, "Title",ExpressionUUID->"3456ac2a-4360-46de-8958-403538c6de1f"],
Cell[677, 24, 257, 6, 54, "Code",ExpressionUUID->"af40aa88-70ac-4d8f-bfd6-90d2aca587e5",
 InitializationCell->False],
Cell[CellGroupData[{
Cell[959, 34, 79, 0, 67, "Section",ExpressionUUID->"fcbb840d-c239-4ef4-aa83-ec1632393dde"],
Cell[CellGroupData[{
Cell[1063, 38, 3622, 85, 52, "TestUI",ExpressionUUID->"6e178bf4-0b3e-4737-9503-3e57a4b6391a",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[4688, 125, 808, 19, 199, "Code",ExpressionUUID->"a02d229c-67ad-4fcd-b2f1-245b63a059bd",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 InitializationCell->False,
 CellID->32205768]
}, Open  ]],
Cell[5511, 147, 321, 7, 34, "Output",ExpressionUUID->"c6422437-5815-45a1-b1dc-47039ff79c5d"]
}, Open  ]]
}, Open  ]]
}
]
*)

